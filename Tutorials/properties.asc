Properties
==========
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

All objects have properties, and using them is probably _the most important_ thing you need to learn when it comes to working with C4. This tutorial will give an overview of what properties are, how to set them and how to use them to make animations happen in your applications.

Properties are important. _All objects have properties you can set._

What Art Thou, Property?
------------------------
Apple documentation describes properties as:

[quote, Apple]
____
A declared property provides a syntactical shorthand for declaring a classâ€™s accessor methods and, optionally, implementing them. You can declare a property anywhere in the method declaration list, which is in the interface of a class, or in the declaration of a protocol or category.
____

Ugh...

Things You Can Change, Simply
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For all intents and purposes, _properties_ represent things you can change about an object by giving you a _simple_ way of doing so. Properties are things like `fillColor`, `width`, and `rate`, all of which change the look or behaviour or state of an object. Examples of how to use these properties might look like the following:

[source]
----
shape.fillColor = C4BLUE;
movie.origin = CGPointMake(10,10);
sample.rate = 0.5f;
slider.center = self.canvas.center;
----

Simply.
~~~~~~~
The simple part about properties is that they are _always_ set with an `=` sign. 

So, when you see...

[source]
----
someObject.property = someNewValue;
----

...you can tell that there is a _property_ of _some object_ that you're setting, and that you're setting it to _some new value_.

Styles
------
Style properties are those that change the *look* of an object. 

Shapes
~~~~~~
The C4Shape object has the most amount of style properties because you can change all kinds of things from stroke / fill colors, to line widths, dash patterns, line cap styles, and more. Examples of these are:

[source]
----
circle.fillColor = C4RED;
circle.lineWidth = 50.0f;
circle.lineDashPattern = @[@(30),@(25)];
----

image::properties/propertiesShapes.png["Shape Properties"]

..., and so on.

The link:/docs/Classes/C4Shape.html[C4Shape documentation] has a list of properties you can change for shapes. _These properties apply to all shapes._

All Visual Objects
~~~~~~~~~~~~~~~~~~
There are a basic set of properties common to _all_ visual objects. Common style properties are:

- opacity
- background/border color
- border width
- mask

To change the opacity of _any_ visual object you simply do the following: 

[source]
----
visualObject.alpha = 0.5f; //makes the object 50% translucent
----

image::properties/propertiesAlpha.png["Alpha Property"]

To change the background color of any object to _red_ you simply do the following:

[source]
----
shape.backgroundColor = C4RED;
shape.cornerRadius = 20.0f;
----

image::properties/propertiesBackground.png["Background Properties"]

Shadows
-------
There are 5 different shadow properties that allow you to change the look / characteristic of a visual object's shadow. They are:

- shadowRadius 
- shadowOpacity 
- shadowColor 
- shadowOffset 
- shadowPath

There are *2* essential things you need to do in order to create a shadow for an object: set its _opacity_ (to something visible), and set its _offset_. The following will create a shadow for an object:

[source]
----
shape.shadowOpacity = 0.8f;
shape.shadowRadius = 10.0f;
shape.shadowOffset = CGSizeMake(10,10);
----

image::properties/propertiesShadow.png["Shadow Properties"]

Geometries
----------
All visual objects have geometry properties that you use to change their location, size (sometimes), and rotation. 

Locations
~~~~~~~~~
Changing the location of a visual object on the canvas is a cinch.  All you do is specify a new point for either the `origin` or the `center` properties of the object and it will move accordingly.

[source]
----
image.center = self.canvas.center;
image.origin = self.canvas.center;
----

image::properties/propertiesLocations.png["Location Properties"]

Sizes
~~~~~
I say _sometimes_ for size because objects like images and movies allow you to change their width or heights by setting their properties...

[source]
----
image.width = 768;
image.height *= 2;
image.frame = CGRectMake(0,0,320,320);
----

image::properties/propertiesSizesImages.png["Image Size Properties"]

...but some objects don't let you do this... 

If you're resizing a shape you have to "rebuild" it like so:

[source]
----
@implementation C4WorkSpace {
	C4Shape *circle;
}

-(void)setup {
	circle = [C4Shape ellipse:CGRectMake(0,0,100,100)];
	circle.center = self.canvas.center;
	[self.canvas addShape:circle];
}

-(void)touchesBegan {
	[circle ellipse:CGRectMake(0,0,368,128)];
	circle.center = self.canvas.center;
}
----

image::properties/propertiesSizesShapes.png["Changing a Shape's Size"]

...for the previous code, when you touch the canvas the circle will turn into an ellipse.

NOTE: We have to reset the center of the circle to keep it in the middle of the canvas after the shape changes size.

Rotation
~~~~~~~~
It's pretty easy to rotate shapes in C4 because all visual objects have rotation properties. You can rotate in all three axes with Z being the default rotation property. 

[source]
----
shape.rotation = QUARTER_PI;
shape.rotationX = QUARTER_PI;
shape.rotationY = QUARTER_PI;
----

image::properties/propertiesRotation.png["Rotation Properties"]

...and you can do this kind of thing for *all* visual objects...

image::properties/propertiesRotationOther.png["Rotating Other Kinds of Objects"]

*WHAAAAAAAAAAAAT!?!?!?!?!*

Animation
---------
There are two unique properties for animations: `animationDuration` and `animationOptions`. We will only show you the former for now, leaving the latter for a full tutorial on animations.

If we take the code from above, where we change the shape of a circle, and add just *one line of code* before the ellipse changes, then the result will be an animation.

[source]
----
-(void)touchesBegan {
	circle.animationDuration = 2.0f;
	[circle ellipse:CGRectMake(0,0,368,512)];
	circle.center = self.canvas.center;
}
----

image::properties/propertiesAnimation.png["Animation Properties"]

...this code makes the circle stretch and grow for a duration of *2.0* seconds. 

Values
~~~~~~
As you come across different objects in C4, especially non-visual ones, you'll run into a lot of different properties that are simply values. 

For example, the playback rate of an audio file can be adjusted by writing:

[source]
----
sample.rate = 2.0f;
----

You can change the values of a vector like so:

[source]
----
vector.x = 10.0f;
vector.z = PI;
----

Adjusting the bounding values of a slider is easy:

[source]
----
slider.minimumValue = 5.0f;
slider.maximumValue = 50.0f;
----

...and so is reading the same slider:

[source]
----
CGFloat f = slider.value;
----

Wrapping Things Up
------------------
So, the main thing to take away from this tutorial is that:

. _all objects use properties_ and 
. _working with properties is dead-easy_.

There are _way_ too many properties for me to list in a single tutorial, but hopefully what I've outlined here gives you a sense of how properties work. Once you get a grip on how to adjust things, animate them, and so on, you'll start to see how _everything begins to work the same way_. 

Properties are important.

Ciao. 
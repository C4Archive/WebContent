Taps and Touches
================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5421700
:vimeo: 64685162

In this tutorial I'll show you how to build a little application that receives `TAP` gestures and then updates its interface to show you how many touches and how many taps were recognized.

The Problem
-----------
I want to build an application that will allow me to register what kind of `TAP` gesture has just been registered. Seems simple enough... But, there are a couple of hurdles. First, we need to make sure that _only one_ gesture is ever being recognized. Second, we need to create gestures for all possible combinations of taps and touches. Third, we need to update a dynamic label and then reset it shortly thereafter.

The Vars
~~~~~~~~
As usual, let's start by outlining the variables for this project. Add the following to your workspace:

[source]
----
@implementation C4WorkSpace {
    C4Label *tapsAndTouches;
    C4Timer *resetTimer;
}
----

We need a persistent reference to our label, but also to our timer. So, we define them here as class variables.

The Label
~~~~~~~~~
The next thing we can do is to create our label with a default text. Add the following method to your project:

[source]
----
-(void)createLabel {
    C4Font *font = [C4Font fontWithName:@"AvenirNextCondensed-Heavy" size:96];
    tapsAndTouches = [C4Label labelWithText:@"TAPS\n&\nTOUCHES" font:font];
    tapsAndTouches.numberOfLines = 3;
    [tapsAndTouches sizeToFit];
    tapsAndTouches.textAlignment = ALIGNTEXTCENTER;
    tapsAndTouches.center = self.canvas.center;
    tapsAndTouches.userInteractionEnabled = NO;
    [self.canvas addLabel:tapsAndTouches];
}
----

Pretty straightforward. We create a font, we create a string that says `"TAPS & TOUCHES"` on 3 different lines. We size the label, center it and add it to the canvas. We also make sure to disable its interaction so it doesn't interfere with the canvas.

Oh yeah, call this method from the `setup`:

[source]
----
-(void)setup {
    [self createLabel];
    //...    
}
----

Label Updating
--------------
The principle interaction of this app we're working on is to register a tap gesture. Then update a label that displays the number of touches and the number of taps for the gesture. To do this add a method to your project that takes 2 string variables, like so:

[source]
----
-(void)updateLabelTaps:(NSString *)tapString touches:(NSString *)touchString {
    tapsAndTouches.text = [NSString stringWithFormat:@"%@\n&\n%@",tapString,touchString];
    [tapsAndTouches sizeToFit];
    tapsAndTouches.width = self.canvas.width;
    tapsAndTouches.center = self.canvas.center;
    
    [resetTimer invalidate];
    resetTimer = [C4Timer automaticTimerWithInterval:2.0f target:self method:@"resetLabel" repeats:NO];
}
----

This method accepts 2 strings and updates the label. It also starts a timer that will wait 2 seconds before triggering a method that will reset the label.

Reset
~~~~~
The reset method is pretty simple, add the following to your project:

[source]
----
-(void)resetLabel {
    tapsAndTouches.text = @"TAPS\n&\nTOUCHES";
    [tapsAndTouches sizeToFit];
    tapsAndTouches.width = self.canvas.width;
    tapsAndTouches.center = self.canvas.center;
}
---- 

The TAP
-------
Before creating all the tap gestures and dealing with receiving only the one we want, let's work through creating a method that will pull apart the gesture and trigger the `updateLabelTaps:Touches:` method. Add the following to your project:

[source]
----
-(void)tap:(UITapGestureRecognizer *)tapGesture {
    //...
}
----

This is the method to which we're going to attach all our gestures.

tapString
~~~~~~~~~
We want to pass a string representation of our taps to update our label. We're going to do this by using a switch statement. We use a switch to give us the opportunity to flip between different states for 1, 2, 3,... taps.

Add the following to your `tap:` method:

[source]
----
NSString *tapString;
switch (tapGesture.numberOfTapsRequired) {
    case 1:
        tapString = @"SINGLE TAP";
        break;
    case 2:
        tapString = @"DOUBLE TAP";
        break;
    case 3:
        tapString = @"TRIPLE TAP";
        break;
    default:
        tapString = [NSString stringWithFormat:@"%d TAPS",tapGesture.numberOfTapsRequired];
        break;
}
----

This looks into the gesture and grabs the `numberOfTapsRequired` for the gesture to recognize. Then, we create different strings for each state using the words `SINGLE`, `DOUBLE`, `TRIPLE` or a number representation for the string.

touchString
~~~~~~~~~~~
Next, we're going to use the same trick for creating a string to represent the number of touches. Add the following to the `tap:` method:

[source]
----
NSString *touchString;
switch (tapGesture.numberOfTouches) {
    case 1:
        touchString = @"1 TOUCH";
        break;
    default:
        touchString = [NSString stringWithFormat:@"%d TOUCHES",tapGesture.numberOfTouches];
        break;
}
----

This simply distinguishes the text for 1 or more touches.

Updating
~~~~~~~~
Now that we have 2 strings necessary for updating we can add the following to our `tap:` method:

[source]
----
[self updateLabelTaps:tapString touches:touchString];
----

When this gets called right at the end of the `tap:` method our label will change.

A'Settin'Up
-----------
Now, we're going to get back to our `setup` method. Here we have to do 2 main things:

- Create all our gestures
- Limit recognition to 1 gesture at a time

Create'em
~~~~~~~~~
Let's create gestures for up to 5 fingers and 5 taps. This means that we want to register:

- 1-touch 1-tap
- 1-touch 2-taps
- ...
- 5-touches 5-taps

To do this we have to create unique gestures for each one of the cases listed above (25 in total). We can do this by adding a `for` loop. Add the following to your `setup` method:

[source]
----
NSInteger tapCount = 5;
NSInteger touchCount = 5;
for(int i = 1; i < tapCount + 1; i++) {
    for(int j = 1; j < touchCount + 1; j++) {
        NSString *tapName = [@"tap" stringByAppendingFormat:@"%d_%d",i,j];
        [self addGesture:TAP name:tapName action:@"tap:"];
        [self numberOfTapsRequired:i forGesture:tapName];
        [self numberOfTouchesRequired:j forGesture:tapName];
    }
}
----

This loop runs through all cases creating gestures whose names are defined like: `tap1_1`, `tap1_2`, ... , `tap5_5`. It also sets the number of taps and touches required for each gesture.

Let'em Fail
~~~~~~~~~~~
By default _all_ gestures will trigger. For instance, if you make a triple-tap gesture both the single and double-tap gestures will trigger before you get to the triple-tap. The way you get around this is by allowing gestures to _fail_.

For a triple tap failing works like this:

- single tap gets registered (triggers if both double- and triple-taps fail)
- double tap gets registered (triggers if triple-tap fails)

We can set this logic up by adding the following `for` loop to our `setup` method:

[source]
----
NSDictionary *allGestures = [self allGestures];
NSArray *gestNames = [allGestures allKeys];
gestNames = [gestNames sortedArrayUsingFunction:strSort context:NULL];
for(int i = 0; i < [gestNames count]; i++) {
    UIGestureRecognizer *g = [self gestureForName:gestNames[i]];
    for(int j = i+1; j < [gestNames count]; j++) {
        [g requireGestureRecognizerToFail:[self gestureForName:gestNames[j]]];
    }
}
----

First, grab all the gestures attached to the canvas. Then grab the names of all the gestures, ordering them based on their names. Finally run a double-loop that requires all gestures to fail for anything past the current gesture.

NOTE: The `requireGestureRecognizerToFail` will actually wait for a tenth of a second or so to make sure any other gesture isn't triggered. The gesture won't recognize immediately but it doesn't take too long... This is normal.

Past?!
~~~~~~
I mentioned that we want to trigger only if _any other gesture_ past the current one fails. For instance, we'll trigger single-tap only if double-tap fails. 

We don't need to say double-tap triggers if single-tap fails. 

Wrapping Things Up
------------------
We've created a fairly simple application that allows the user to tap the screen up to 5 times with up to 5 fingers. A label in the center of the screen will change its text to reflect the number of touches and taps that are registered. Though the app looks and acts simple there were actually a couple of tricky nested loops to create and modify the gestures so that we only react to the last one that was triggered.

Oh, the old familiar places.
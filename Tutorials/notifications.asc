Notifications
=============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

On iOS there is a really great system for communicating between objects. This system lets you broadcast and listen for messages, and then react to those messages in any way you want. The really nice thing about using notifications to communicate between objects is that you can create a ton of responsiveness in your applications without too much mess. 

image::notifications/notifications.png["Notifications"]

Communicating
-------------
There are two steps to setting up the communication between two objects. Even though you can have many objects react to a notification from another single object, the communication is really 1 to 1. That is, in any communication there is always two steps to set up: 1) a _listener_ and 2) a _broadcaster_. 

Speak! (a.k.a. posting)
~~~~~~~~~~~~~~~~~~~~~~~
The first step in setting up the communication between objects is to have one of them *POST* a notification. The basic syntax is this:

[source]
----
[obj postNotification:@"aMessage"];
----

All objects in C4 can post notifications, and notifications can be inserted into _any_ method in your object's implementation.

Listen!
~~~~~~~
The second step in setting up the communication between objects is to have one of them *LISTEN* for a notification. The basic syntax is this:

[source]
----
[obj listenFor:@"aMessage" andRunMethod:@"aMethod"];
----

Notice how there is a second part to this call? When you want to _listen_ for a notification what you really want is to _react_ to the notification. Reacting means running some code.

What should my message be?
--------------------------
Naming your message is really easy: _it can be anything_. In the example above we post `@"aMessage"` which is just a string (i.e. a bunch of characters). This message could be:

[source]
----
@"aMessage"
@"a message"
@"a massage"
@"something completely different"
----

When you specify a message you have to make sure that you listen _exactly_ for that message. So, the listen calls for the above examples would be:

[source]
----
[obj listenFor:@"aMessage" ...];
[obj listenFor:@"a message" ...];
[obj listenFor:@"a massage" ...];
[obj listenFor:@"something completely different" ...];
----

What should I run?
------------------
The intention of posting and listening is for one object to _react_ to another object. What this means is that you want an object to run some specific code when something happens elsewhere in your application. We call this kind of programming _event-based_.

Running Code
~~~~~~~~~~~~
I've mentioned it a couple times, but I really want to drive this home. When you _listen_ for a notification, you want to _run_ some code. The way you do this is to have a method with the code you want to run, and then use that method name like so:

[source]
----
-(void)setup {
    [self listenFor:@"aMessage" andRunMethod:@"aMethod"]
}

-(void)aMethod {
    //some code to run
}
----

Ok. But, WHY?
~~~~~~~~~~~~~
Event-based architecture is really great for mobile devices because you don't have to be constantly checking the state of things. It reduces the amount of observing and calculating you have to do on your own. 

Try to think about another language how you might use for creative coding. How would you set up a system for checking when an object is touched? What if there were dozens of objects on the screen? How would you distinguish one object in particular? Then, how would you react to that?

NOTE: The underlying architecture of iOS applications and devices uses this event-based approach because it's lighter on the system. C4 taps into this architecture to take advantage of this extremely useful technique.

Ok. But, HOW?
~~~~~~~~~~~~~
There are a few ways of practically setting up listening. The easiest is to have one object listen to itself! You can also have one or many objects listen for a message. Also, instead of listening for _all_ messages from _all_ objects, one can actually listen for notifications from _specific_ objects. 

Let's have a look at how to implement each of these tricks.

Listen To Thy Self
------------------
You can have an object listen to itself. The easiest way to show how you can do this is to do this in the canvas.

[source]
----
-(void)setup {
    [self listenFor:@"touchesBegan" andRunMethod:@"react"];
}

-(void)react {
    self.canvas.backgroundColor = [UIColor colorWithWhite:[C4Math randomInt:100]/100.0f alpha:1.0f];
}
----

GITHUB: Check out this link:https://gist.github.com/C4Tutorials/5339853[gist].

Wait. I didn't post anything!!!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are a few methods in C4, common to all visual objects, that automatically post notifications for you. These methods are: 

[source]
----
-(void)touchesBegan;
-(void)touchesEnded;
-(void)touchesMoved;
-(void)longPress;
-(void)swipedRight;
-(void)swipedLeft;
-(void)swipedUp;
-(void)swipedDown;
-(void)tapped;
----

It's possible for you `listenFor` these method names, and not have to set up the `postNotification` yourself.

There are a couple of other messages you can `listenFor` from specific objects like the `@"endedNormally"` from an audio sample, the `@"reachedEnd"` from a movie, or the `@"imageWasCaptured"` from a camera.

Can't I just run the method?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Yes. You could easily just do the following:

[source]
----
-(void)touchesBegan {
	self.canvas.backgroundColor = [UIColor colorWithWhite:[C4Math randomInt:100]/100.0f alpha:1.0f];
}
----

Then WHY would I do this?
~~~~~~~~~~~~~~~~~~~~~~~~~
This simple example might be a little _too_ simple and actually overcomplicate reacting to a touch. However, it does show how you can have one object listen to itself.

I've found for myself that I want to listen for methods in a single class when I want my setup to be simple. For example, if I have a complicated class with lots of methods and lines of code I could create a `setup` method like this:

[source]
----
-(void)setup {
	//do stuff
	[self listenFor:@"methodAWasRun" andRunMethod:@"methodB"];
	[self listenFor:@"methodBWasRun" andRunMethod:@"methodC"];
	[self methodA];
}

-(void)methodA {
	//do stuff that might take a while
	[self postNotification:@"methodAWasRun"];
}

-(void)methodB {
	//do more stuff that might take a while
	[self postNotification:@"methodBWasRun"];
}

-(void)methodC {
	//do even more stuff
}
----

This might seem a little banal but, when you're looking at a class with hundreds of lines of code, being able to read how a class links and triggers methods in its setup makes it really easy to understand what's going on.

Listen to Thy Neighbours
------------------------
The most common thing you're going to do is listen for notifications from other objects. Here's a really simple example that shows you how to react to objects being touched.

[source]
----
-(void)setup {    
    C4Shape *s = [C4Shape ellipse:CGRectMake(0, 0, 192, 192)];
    s.center = self.canvas.center;
    [self.canvas addShape:s];
	
	[self listenFor:@"touchesBegan" andRunMethod:@"react"];
}
 
-(void)react {
    self.canvas.backgroundColor = [UIColor colorWithWhite:[C4Math randomInt:100]/100.0f alpha:1.0f];
}
----

This example shows how you can listen for the `touchesBegan` from an object. 

If you run this example you'll see that touching the canvas also changes its color. The reason is that BOTH the canvas and the shape are posting the `touchesBegan` notification.

GITHUB: check out this link:https://gist.github.com/C4Tutorials/5339875[gist]

Listen to Thy Specific Neighbour(s)
-----------------------------------
You can `listenFor` notifications from specific objects. Modifying the previous example, we can make the canvas change color when only the shape is touched:

[source]
----
[self listenFor:@"touchesBegan" fromObject:s andRunMethod:@"react"];
----

GITHUB: check out this link:https://gist.github.com/C4Tutorials/5339967[gist]

This is a pretty easy trick. But, it becomes a lot of code if you want to listen to the same message from _many_ objects. A simple way of listening to many objects is to do the following:

[source]
----
[self listenFor:@"touchesBegan" fromObjects:@[s1,s2,s3] andRunMethod:@"react"];
----

If you modify our example to use 3 shapes and use the line of code above, then the canvas will change color when any object other than the canvas is touched.

GITHUB: check out this link:https://gist.github.com/C4Tutorials/5340007[gist]

Who Said What?
--------------
Now we're starting to get advanced! You can actually target an object that posts a notification so that you can work with it directly. You need to do two things:

. The method you run has to receive an `NSNotification`
. The method name you choose in your `listenFor` has to have an : at the end of its name

[source]
----
-(void)setup {
	[self listenFor:@"aMessage" andRunMethod:@"aMethod:"]; //note the :
}

-(void)aMethod:(NSNotification *)notification {
	// do stuff
}
----

This technique passes the notification that was posted, from which you can grab the object. Let's say you know that for a particular message the object posting the notification is a shape. You can do the following:

[source]
----
C4Shape *theNotifyingObject = (C4Shape *)[notification object];
----

Now, this is how you would change the color of a shape that was touched:

[source]
----
-(void)setup {
    C4Shape *s1 = [C4Shape ellipse:CGRectMake(0, 0, 192, 192)];
    C4Shape *s2 = [C4Shape ellipse:s1.frame];
    C4Shape *s3 = [C4Shape ellipse:s1.frame];

    s1.center = CGPointMake(self.canvas.center.x, self.canvas.height * 0.25f);
    s2.center = self.canvas.center;
    s3.center = CGPointMake(self.canvas.center.x, self.canvas.height * 0.75f);
    
    [self.canvas addObjects:@[s1,s2,s3]];

    [self listenFor:@"touchesBegan" fromObjects:@[s1,s2,s3] andRunMethod:@"randomColor:"];
}

-(void)randomColor:(NSNotification *)notification {
    C4Shape *shape = (C4Shape *)notification.object;
    shape.fillColor = [UIColor colorWithRed:[C4Math randomInt:100]/100.0f
                                      green:[C4Math randomInt:100]/100.0f
                                       blue:[C4Math randomInt:100]/100.0f
                                      alpha:1.0f];
    
}
----

Here's slightly more link:/examples/listenFor.php[advanced example] that listens for `TAP` gestures from objects.

Balla. 

GITHUB: Check out this link:https://gist.github.com/C4Tutorials/5340194[gist]

Wrapping Things Up
------------------
I've shown some pretty basic examples of how you can communicate between objects. Some of the benefits of doing this are that you can have more flexible code, and you can easily respond to events happening in your application. 

This technique is really really powerful. Why? Because even though we have shown notifications only with shapes, you can do this with *ALL OBJECTS IN C4*. As you get used to working with notifications you'll start to see relationships build between any kind of object. 

Soon, you'll be building communications between shapes and images, images and movies, movies and sounds, sounds and opengl, cameras and just about anything and everything else!
Exporting Media
===============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5399635

And so, like a bad interrogator, you ask "Oh C4 how do I get stuff out of you?" Well, in this tutorial I'll show you two or three little tricks for exporting images and pdfs from C4. It's going to take a bit of raw code, but I have no doubts you'll be able to keep up.

image::exportingMedia/exporting.png["Left to Right: Low, High, PDF"]

First, The Files
----------------
First things first. To show you what we're going to be producing, you can click on the following links:

link:exportingMedia/exportedImageFromC4.png[A Normal 768 × 1024 @ 72ppi Image]

link:exportingMedia/exportedHighResImageFromC4.png[A High Res 3840 × 5120 @ 360ppi Image]

link:exportingMedia/exportedPDFFromC4.pdf[A Scalable 768 x 1024 PDF]

Things in ContextRef
--------------------
The first bit, as we usually do, is to start with creating the class variables that you're going to use in the tutorial. This time you'll probably _not_ has seen the kind of variable we're going to use.

CGContextRef
~~~~~~~~~~~~
When you're going to draw things into images or pdfs that are ready for saving or rendering on screen, there's this in-between space called a _drawing context_ that you fill up with what you're drawing. When you've finished adding things to the drawing context, then you can either render that context into something you want to see on screen, or you can save it to a file.

This context is part of the _Core Graphics_ framework, and so it has a `CG` prefix. Add the following to your workspace:

[source]
----
@implementation C4WorkSpace {
    CGContextRef graphicsContext;
}
----

This is the only class variable we're going to need for this tutorial. Apple describes this as:

***************
A graphics context contains drawing parameters and all device-specific information needed to render the paint on a page to the destination, whether the destination is a window in an application, a bitmap image, a PDF document, or a printer.
***************

The rest of this tutorial is going to be laid out like this:

. create an object to go on the canvas
. create a graphics context to draw into
. draw the canvas and all its subviews into the graphics context
. save the graphics context to two different places

Andale.

The Canvas
----------
In writing this tutorial I actually learned a lot about rendering to graphics contexts. One of the great things I found out for myself was that if you set things up properly you can choose to render _only one object_ and all of its subviews will render as well. 

I thought this was brilliant because I had originally tried to do a bunch of nonsense like context translating, pushing and popping, rendering things upside down and so on just to get everything looking in the image like it did on the canvas... And, though this more raw approach was working, it was really really heavy on Core Graphics tricks... 

We're actually just going to draw the canvas into our context. So, we can start by setting it up and adding an object to be drawn.

Setup
~~~~~
Create your setup method to have a shape made from a string centered on the canvas. Add the following to your code:

[source]
----
-(void)setup {
    C4Font *font = [C4Font fontWithName:@"AvenirNextCondensed-Heavy" size:144];
    C4Shape *s = [C4Shape shapeFromString:@"EXPORTING" withFont:font];
    s.center = self.canvas.center;
    [self.canvas addShape:s];
    //...
}
----

All we've done is create a big fat font, created a shape from the work `EXPORTING` and added that to the center of the canvas. 

We're done here.

Three Methods
-------------
We're going to export a snapshot of our app in 3 different ways: as a 1:1 image, as a high-res image and as a PDF. In order to do this, we'll need to write 3 different methods for creating appropriate _drawing contexts_.

A Normal Context
~~~~~~~~~~~~~~~~
The first method will give us a run-of-the-mill image context with no special options. Add the following method outside your `setup`:

[source]
----
-(CGContextRef)createImageContext {
    UIGraphicsBeginImageContext(self.canvas.frame.size);
    return UIGraphicsGetCurrentContext();
}
----

This creates a basic image context the same size as our canvas and gives it back to us. With this method we'll be able to produce images that are `768 x 1024` at `72ppi`. Opening the file and checking its image size in Photoshop gives us the following:

image::exportingMedia/lowResDetails.png["Low Res Details in Photoshop"]

A High Res Context
~~~~~~~~~~~~~~~~~~
The second method you can create is the following:

[source]
----
-(CGContextRef)createHighResImageContext {
    UIGraphicsBeginImageContextWithOptions(self.canvas.frame.size, YES, 5.0f);
    return UIGraphicsGetCurrentContext();
}
----

This creates a drawing context from which we'll be able to grab an image that is 5 times as wide and tall, and 5 times as dense in terms of points. Yes, yes, you read that properly... We're going to get a `3840 x 5120` at `360ppi` image. Opening the file and checking its image size in Photoshop gives us the following:

image::exportingMedia/highResDetails.png["High Res Details in Photoshop"]

NOTE: The `YES` part of that method basically means that our image will NOT have any background alpha transparency.

A PDF Context
~~~~~~~~~~~~~
If you want to preserver scalability of paths and shapes and such, you'll want to draw to a PDF. The third method you can create is: 

[source]
----
-(CGContextRef)createPDFContext {
    NSString *fileName = @"exportedPDFFromC4.pdf";
    NSString *outputPath = [[self documentsDirectory] stringByAppendingPathComponent:fileName];
    
    UIGraphicsBeginPDFContextToFile(outputPath, self.canvas.frame, nil);
    UIGraphicsBeginPDFPage();
    return UIGraphicsGetCurrentContext();
}
----

As you can see, building a PDF context is a little different. You have to first create a file for the rendering, including a file name and a location. The location is going to be in our app's Documents directory. After you have the output file path, then you create the context and begin a page for the pdf.

So, those are the 3 methods you need to create drawing contexts. Now, I'm going to step aside to describe the Documents directory and how to get images and pdfs and other files you  might create *out of the iPad or iPhone* you're working on.

An App's Documents
------------------
Every app has a Documents directory. Since we're going to be saving images to this directory, and not just PDFs, we actually need to create a method that will return us the directory path. Add the following to your application:

[source]
----
-(NSString *)documentsDirectory {
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    return paths[0];
}
----

This method gives the path to your app's Documents directory.

Sharing Documents
~~~~~~~~~~~~~~~~~
If you haven't done this before, then pay close attention. 

*Every app you build can share its documents via iTunes.*

This means that if you want to get the media that you're producing in C4 out of the device and onto your computer, you're going to have to set your app up for sharing.

XXXX-Info.plist
~~~~~~~~~~~~~~~
In the Project Navigator on the left hand side of the Xcode window, navigate to a file called `XXXX-Info.plist` where the XXXX is the name of your current project. For me, I'm working in the main C4iOS development project, so the file is called `C4iOS-Info.plist`. 

When you click on this file a list of variables pops up in the main window. Somewhere along the list is an entry called *Application Supports iTunes File Sharing*, its type is a `BOOL`. 

What you want to do is set this value to `YES`

image::exportingMedia/itunesFileSharingYES.png["Select File Sharing"]

If you don't have this entry, simply add a row either by right-clicking on a file and choosing `Add Row`, or clicking on the + symbol of any of the other rows. Then, for the Key part of the new row insert `Application Supports iTunes File Sharing` and then set the value to `YES`.

Getting Documents
~~~~~~~~~~~~~~~~~
The next time you compile the application it will have a little flag that grants iTunes access to the app's Documents directory. 

Open iTunes. (with your device plugged in)

Click on the device in the top-right corner of the iTunes window.

image::exportingMedia/iTunesSelectDevice.png["Select the Device"]

Select the Apps tab.

image::exportingMedia/iTunesDeviceAppsTab.png["Device Apps Tab"]

Scroll down to the *File Sharing* section and click on your App.

image::exportingMedia/iTunesDeviceAppsSection.png["Device Apps Section"]

On the right, in a little window titled `XXXX Documents` (mine's C4iOS Documents) you'll be able to see a list of files that _exist inside your app's Documents directory._ 

It's from here that you'll be able to grab the images and PDFs that we're going to create.

Saving To Places
----------------
We're going to save the three different types of images and PDFs to two different places. Before we move on to the actual exporting, add the following three methods to your application:

[source]
----
-(void)saveImageToLibrary {
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil);
}
----

...This is the simplest way of saving a file to your device's Photos Album.

[source]
----
-(void)saveImage:(NSString *)fileName {
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    NSData *imageData = UIImagePNGRepresentation(image);
    NSString *savePath = [[self documentsDirectory] stringByAppendingPathComponent:fileName];
    [imageData writeToFile:savePath atomically:YES];
}
----

...This is how you save an image to your app's Documents directory.

[source]
----
-(void)savePDF {
    UIGraphicsEndPDFContext();
}
---- 

...The easiest of the three, this is how you save the PDF that you already created.

TIP: Remember, we already specified a file path for the PDF when we first created it.

Exporting
---------
Ok, now we're able to write a couple of methods for exporting images and media.

renderInContext
~~~~~~~~~~~~~~~
The following few methods use the same trick to get the contents of the canvas into the drawing contexts that we'll use for exporting. The line of code that's important (and shared) in all those methods is:

[source]
----
[self.canvas renderInContext:graphicsContext];
----

That's it. That's how you render all the contents of the canvas (or any other visual object) into a drawing context.

Normal Images
~~~~~~~~~~~~~
To export normal sized images to both the Photo Album and to the app's Documents directory, add the following method to your project:

[source]
----
-(void)exportImage {
    graphicsContext = [self createImageContext];
    
    [self.canvas renderInContext:graphicsContext];
    NSString *fileName = @"exportedImageFromC4.png";
    
    [self saveImage:fileName];
    [self saveImageToLibrary];
}
----

...Here we've created the normal context, rendered the canvas and set up a file name for exporting. Then we save the image to both places.

High Res Images
~~~~~~~~~~~~~~~
To export high-res images, add the following method to your project:

[source]
----
-(void)exportHighResImage {
    graphicsContext = [self createHighResImageContext];

    [self.canvas renderInContext:graphicsContext];
    
    NSString *fileName = @"exportedHighResImageFromC4.png";
    
    [self saveImage:fileName];
    [self saveImageToLibrary];
}
----

...The big differences between this and the last are calling the `[self createHighResImageContext]` and the name we use for exporting.

PDF Images
~~~~~~~~~~
To export PDF images, add the following method to your project:

[source]
----
-(void)exportPDF {
    graphicsContext = [self createPDFContext];
    
    [self.canvas renderInContext:graphicsContext];

    [self savePDF];
}
----

...Pff. Simple.

Doing It
--------
Now, to actually get our app to do all this, add the following 3 lines of code to the end of your `setup`:

[source]
----
[self exportImage];
[self exportHighResImage];
[self exportPDF];
----

Your `setup` should look like:

[source]
----
-(void)setup {
    C4Font *font = [C4Font fontWithName:@"AvenirNextCondensed-Heavy" size:144];
    C4Shape *s = [C4Shape shapeFromString:@"EXPORTING" withFont:font];
    s.center = self.canvas.center;
    [self.canvas addShape:s];
    
    [self exportImage];
    [self exportHighResImage];
    [self exportPDF];
}
----

Now, check out your Photos Album for the new images you've made and then via iTunes grab the files that are in the Documents directory of your app and drag them to your Desktop. You can open them in Preview.

To Not CG
---------
Originally I was doing all this in almost pure Core Graphics. Eariler I mentioned that I learned something while doing this tutorial, and that was to NOT do it in Core Graphics. The `UIKit` functions I found were gold:

[source]
----
UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsBeginImageContext();
UIGraphicsBeginImageContextWithOptions();
UIGraphicsBeginPDFContextToFile();
UIGraphicsBeginPDFPage();
UIGraphicsEndPDFContext();
UIImageWriteToSavedPhotosAlbum();
UIGraphicsGetCurrentContext();
----

...Those functions save a TON of code, and a ton of figuring out the quirks with doing everything by hand. 

GITHUB: If you're interested to see how I did things before finding these `UIKit` methods, check out this link:https://gist.github.com/C4Tutorials/5416238[gist]

Wrapping Things Up
------------------
We've gone through a few steps for creating images and PDFs and saving those to different places on your device. You can now go ahead and grab these things off your iPhone or iPad and work some photoshop magic with them if you want. Or, not. Your choice... But, I hope you make pretty things now.

Arriba. 
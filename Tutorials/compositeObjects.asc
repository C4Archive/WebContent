Composite Objects
=================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5375529
:vimeo: 64684452

I'm going to show you how to put shapes in a shape and mask the shape with another shape. 

image::compositeObjects/compositeObjects.png[A Composite Shape]

Allons-y.

Principal
---------
The main thing you should take away from this tutorial is this:

**********************
_You can put objects inside one another, and work with them like they were on the canvas._
**********************

I'll show take you link:/compositeObjects/stepByStep.png[step-by-step] through making an example, and then show some others at the end of the tutorial.

The Main Object
---------------
I wanted to start out by creating an intricate shape, like this:

image::compositeObjects/compositeObjects.png[A Composite Shape]

And thought to myself, "How would I do this in C4?" I came up with a couple of ways:

. Build a bunch of arc shapes and position/rotate them into place
. Build a bunch of curves in place, and use their control points to shape the shape
. Build a bunch of circles and adjust their start / end points
. Build a bunch of circles and mask them

After toying around for a bit I settled on the last option for the following reasons:

. too much math
. too much math
. too much math
. pretty easy

How to Mask 12 objects
~~~~~~~~~~~~~~~~~~~~~~
The easiest way to mask 12 objects is to position them *inside* a main object and then mask the main object. That's right, I said _inside_. 

When you mask an object, it and _all_ of its subviews will clip to the mask. The parts that become "invisible" are those that are directly underneath any alpha channels in the mask. For instance, if you use a circle as a mask then everything outside that circle will be invisible and anything inside the area of the circle will be visible. 

If the circle is semi-transparent, then the things inside the circle will also become semi-transparent.

NOTE: Apple's doc on  link:https://developer.apple.com/library/ios/#documentation/graphicsimaging/conceptual/drawingwithquartz2d/dq_images/dq_images.html[bitmap images and image masks].

Build a Shape
~~~~~~~~~~~~~
We're going to start by building our main object, a shape. It doesn't really matter what shape we're going to use, only that the frame is big enough for our animation.

[source]
----
@implementation C4WorkSpace {
    C4Shape *mainShape;
}

-(void)setup {
    mainShape = [C4Shape rect:CGRectMake(0, 0, 368, 368)];
    mainShape.strokColor = [UIColor clearColor];
    mainShape.fillColor = [UIColor clearColor];
	mainShape.center = self.canvas.center;
    [self.canvas addShape:mainShape];

	//...
}
----

image::compositeObjects/compositeObjectsMainShape.png[The Main Shape]

[[anchor-shape]]
We're going to put all of our other shapes inside this one and then mask it. Since we don't want any color in the background of our mask we make the `strokeColor` and `fillColor` both clear.

Create The Shapes
-----------------
The next thing we need to do is create our shapes and add them to the `mainShape` object. To get the effect of what we're looking for, this sort of snowflakey concentric-ring thing, we want to have many circles rotated about a common point. 

Building The Circles
~~~~~~~~~~~~~~~~~~~~
For simplicity, we're just going to say that the shape of our circles will be the same size as our `mainShape`. We also want to position the shapes based on the `center` of our `mainShape` rather than that of the canvas, so we create a point.

[source]
----
CGPoint center = CGPointMake(mainShape.width / 2, mainShape.height / 2);
----

To create 12 identical shapes rotated around a point we use a `for` loop. To get the shapes rotating from their bottom-most point we set their `anchorPoint` to {0.5,1.0} and then its `rotation` property to be `1/12th` of a full rotation. Finally, 

[source]
----
for(int i = 0; i < 12; i ++) {
    C4Shape *shape = [C4Shape ellipse:mainShape.frame];
    shape.anchorPoint = CGPointMake(0.5,1.0f);
    shape.center = center;
    shape.rotation = TWO_PI / 12.0f * i;
    shape.fillColor = [UIColor clearColor];
    [mainShape addShape:shape];
}
----

This gives us a nice distribution of circles. All the objects appear to be rotating around the center of the canvas. 

image::compositeObjects/compositeObjectsCircles.png[12 Circles in a Main Shape]

But, this is a bit of a deception. What's really going on is that these circles are actually at the {192,192} position of the `mainShape`, the center of which is at the center of the canvas. If we hadn't already set the <<anchor-shape,stroke and fill >> colors to clear our shape would look like this:

image::compositeObjects/compositeObjectsMainShapeRevealed.png[12 Circles Main Shape Revealed]

Put A Mask On It
----------------
Now it's time to add a mask to our `mainShape`. This is a pretty straightforward step, all we do is create the shape, center it to the `mainShape` and then add it as a mask.

[source]
----
C4Shape *mask = [C4Shape ellipse:mainShape.frame];
mask.center = center;
mainShape.mask = mask;
----

image::compositeObjects/compositeObjectsMaskShape.png[The Mask's Shape]

...That's what the mask shape looks like over top of the circles.

image::compositeObjects/compositeObjectsMasked.png[Composite Shape Masked]

...And, this is what the circles look like when the `mainShape` is masked.

Easy peasy.


A Touch of Animation
--------------------
So, right now we have a nice looking shape that doesn't do anything other than just sit still in the middle of the screen. I didn't like this so I wanted to add some animation to the shape.

Rotating 12 Shapes
~~~~~~~~~~~~~~~~~~
The first thing I wanted to do was rotate the shapes, but how can you get all 12 shapes to rotate around the mid-point at the same time, you ask? Well, the answer is *you don't*! 

All our shapes are _inside_ the `mainShape`, so to get them all rotating the only thing we have to do is rotate the `mainShape`. You can put the following code right at the end of the `setup` method:

[source]
----
mainShape.animationDuration = 10.0f;
mainShape.animationOptions = REPEAT | LINEAR;
mainShape.rotation = TWO_PI;
----

image::compositeObjects/compositeObjectsRotating.png[Rotating Shape]

Borrrrring
~~~~~~~~~~
Now, I thought to myself, for a tutorial just rotating the shape is a bit flat and boring. How do I spice up the animations...? I wanted to animate the `strokeColor` and the `rotation` of each circle in the `mainShape`. I also wanted the animations for each of the circles to be offset by a little bit of time. 

The easiest way to do this was to add animations to the shapes *in* the `for` loop that we ran earlier. To get the offset animations I could use the `runMethod:withObject:afterDelay` method on each circle. This approach required me to first create a new method called `animateShape:` into which I would pass the current shape. Inside this method would be all the required animation stuff for the current circle.

[source]
----
-(void)animateShape:(C4Shape *)shape {
    shape.animationOptions = REPEAT | AUTOREVERSE;
    shape.animationDuration = 2.0f;
    shape.strokeColor = C4RED;
    shape.rotation = PI;
}
----

What this method does is take any shape that's passed to it and run some animation stuff on it. To trigger this method I had to put the following line of code inside the `for` loop right at the end of all the other code:

[source]
----
for(int i = 0; i < 12; i ++) {
	//...other stuff
	//[mainShape addShape:shape];
    [self runMethod:@"animateShape:" withObject:shape afterDelay:(i+1)*0.5f];
}
----

The important part of this step is the `(i+1)*0.5f` which offsets the starting of each circle's animation by a half second. And we're already getting a nice little animation:

image::compositeObjects/compositeObjectsAnimation.png[Composite Shape Animated]

Just A Touch More
~~~~~~~~~~~~~~~~~
I wanted to add one final touch to the animation, which again takes the same kind of animation delay approach as above. Inside the `animateShape:` method I snuck in a delayed call to a second animation method:

[source]
----
-(void)animateShape:(C4Shape *)shape {
	//...other stuff
    [self runMethod:@"animateStrokeEnd:" withObject:shape afterDelay:0.25f];
}

-(void)animateStrokeEnd:(C4Shape *)shape {
    shape.animationDuration = 15.0f;
    shape.strokeEnd = 0.0f;
}
----

image::compositeObjects/compositeObjectsFinal.png[Final Look]

link:compositeObjects/veryNice.jpg[Very Niiiice.]

Composite Movies
----------------
Here's another example of composite objects using movies and masks. I put a shape in a shape to make a donut, then the donut in a movie to make a mask. I copy the donut and turn it white, then I put the this in a movie to make it look like a cut out. Then I put the masked movie in the other movie and spin the whole thing. Then, I spin the masked movie the other direction to make it look like there's a movie in a movie. 

image::compositeObjects/compositeObjectsMovie.png[A Composite Movie]

GITHUB: Grab this link:https://gist.github.com/C4Tutorials/5384383[gist]

Right. I put a movie in a movie so you can watch while you watch. 

Carry on.
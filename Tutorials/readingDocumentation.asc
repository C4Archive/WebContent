Reading Documentation
=====================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

In this tutorial we will show you how to understand our documentation (as well as Apple's, because we've copied their style) and translate what's written into code.

image::readingDocumentation/classDocument.png["The C4Control Class Document"]

NOTE: I had trouble understanding Apple's documentation style when I first started working with Objective-C in 2009. It took me a while to get used to the way they presented their reference and API. After a while I began to fully understand how search and navigate the tremendous amount of resources that are available for developing iOS apps.

Main Doc Types
--------------
There are 2 main types of documents that you'll run into when searching through the organizer. These are:

- API reference document
- Conceptual document (Programming Guides)

Class Reference Docs
~~~~~~~~~~~~~~~~~~~~
A class reference document presents you with a thorough description of a Class. You'll probably find yourself reading more through this kind of document than any other when you need to know more about the methods, properties and hierarchies of an individual object.

image::readingDocumentation/classReference.png["A Class Reference Document"]

Because these kinds of documents are highly detailed, you'll find yourself coming back to them more often than any other type of document.

Programming Guides
~~~~~~~~~~~~~~~~~~
These documents provide an in-depth look at the techniques you'll need for developing various concepts. At the moment, we don't offer programming guides for C4 (instead, we provide tutorials and examples on our site), but you will often run into these documents when searching for iOS-specific concepts.

image::readingDocumentation/programmingGuide.png["A Programming Guide"]

These documents should be read when you _need to read them_, or if you're generally bored and interested in reading something equally dry. The subjects for each programming guide are on a general topic and will give you a better understanding of how to approach a problem or better understand a subject.

For instance, if you want to learn more about _views_ and what they are, you can search for the _iOS View Programming Guide_.

Anatomy of a Reference Doc
--------------------------
The style of reference docs can be strange at first. The rest of this tutorial will focus on the structure of reference docs and how to turn them into code. A reference document is broken up into the following sections:

- Title & Details
- Overview
- Tasks
- Properties
- Instance Methods

Title & Details
~~~~~~~~~~~~~~~
This section outlines the "placement" of the current class in relation to the overall hierarchy of other objects, documentation, current api versions and so on... 

This section usually has a list of the following details:

- *Inherits From* The ancestors of the current class, you can look to these for more methods that the current class can use
- *Conforms To* A list of "protocols" to which the current class has to conform, meaning that its api has to have certain methods defined
- *Framework* For Apple apis this link will point you to the framework that needs to be imported into your project for this class to be used
- *Availability* The earliest possible version of iOS you need in order to use this class, e.g. a class with availability of iOS 6.0 cannot be used if you're running 5.1
- *Declared In* The header and implementation files that define the methods and properties available to this class
- *Related Sample Code* For many classes you can click on these links to find sample projects and code that use the current class

image::readingDocumentation/titleDetails.png["Class Reference Title & Details"]

.But They're Not All There...
[NOTE]
A class does not have to present all of the details listed above. For simple classes there might not be many details to list out. However, more complicated classes may have a lot of detail to fully explain how they are constructed and work.

Overview
~~~~~~~~
This section usually provides an in-depth discussion about the current class. The overview for the C4Control class is very long because it is the base class for all visible objects in C4. The C4Control overview outlines all the details and characteristics that are available in every other class (e.g. C4Shape, C4Movie, etc.) that inherits _from_ it.

image::readingDocumentation/overview.png["Class Reference Overview"]

NOTE: It's always a good idea to at least skim the overview for a class because it will tell you how it works.

Tasks
~~~~~
This section is a complete list of methods and properties available for the current class. This means that for _any_ object you create you will be able to call these methods and access or change the properties in this list.

The tasks section is generally broken down into groups of methods and properties that are related to one another. In the C4Control class, the _Convenience Methods_ section contains 4 methods that help you deal with general situations, whereas the _Setting a Control's Origin Point_ section only has a single property.

image::readingDocumentation/tasks.png["Class Reference Tasks"]

Properties
~~~~~~~~~~
This section is a listing of all properties, sorted alphabetically, that apply to the current class. 

image::readingDocumentation/properties.png["Class Reference Properties"]

Class Methods
~~~~~~~~~~~~~
This section is a listing of all class methods, sorted alphabetically, that apply to the current class. 

image::readingDocumentation/classMethods.png["Class Reference Class Methods"]

NOTE: Class methods are those that start with a `+` symbol in the documentation, e.g. `+(void)doSomething`. This means that you can _only_ call them like this: `[C4Shape ...];` and not on individual objects themselves.

Instance Methods
~~~~~~~~~~~~~~~~
This section is a listing of all instance methods, sorted alphabetically, that apply to the current class. 

image::readingDocumentation/instanceMethods.png["Class Reference Instance Methods"]

NOTE: Instance methods are those that start with a `-` symbol in the documentation, e.g. `-(void)doSomething`. This means that you can _only_ call them like this: `[objectName ...];` and not on classes.

Reading A Property
------------------
The best way to think about properties is that they are _characteristics_ of an object, like the +fillColor+ property of a C4Shape. In many cases properties represent style but they can also represent the current state of an object, such as its location or the current time of a movie.

There are 4 things you should be aware of when reading a property's documentation:

- Name
- Attributes
- Type
- Animatable
- Discussion

The following image shows a typical documentation of a property and highlights the 4 main components you should know about...

image::readingDocumentation/property.png["A Property"]

Name
~~~~
This is the name of the property, it is the "word" that you use when programming to access this property.

[source]
----
shape.anchorPoint
----

Attributes
~~~~~~~~~~
The attributes of a property tell you a few important things, some of which you'll only have to worry about when you start programming your own classes with properties. For the most part you'll want to pay attention to the _readability_ of the property and it's _accessor names_.

- *readonly*: you can only get the value for this property, you cannot change it. An example of this is a C4Movie's +currentTime+ property, you can get the time but you *cannot* set it...

[source]
----
CGFloat theTime = movie.currentTime; //gets the current time
movie.currentTime = 10.0f;           //NOT POSSIBLE
----

- *readwrite*: you can both get and set the value for this property. An example of this is a visible object's +anchorPoint+ property.

[source]
----
CGPoint theAnchor = shape.anchorPoint;  //gets the anchor point
movie.anchorPoint = CGPointMake(10,10); //sets the anchor point
----

- *getter=*: for semantic reasons the name of the property can be changed so that it reads better. For a documented property 

[source]
----
@property (readonly, getter=isPlaying) BOOL playing;
----

[source]
----
if(theMovie.isPlaying == YES) {}; //reads nicer than...
if(theMovie.playing == YES) ();   //not as nice...
----

- *setter=*: I run into this attribute rarely, but it pops up from time to time. The reasoning is semantic, the same as above.

Type
~~~~
This states the _class_ or _data type_ of the property. The type of a visible object's +anchorPoint+ is +CGPoint+, whereas its frame will be +CGRect+, and if it's a C4Shape its +fillColor+ will be a +UIColor+ object.

Animatable
~~~~~~~~~~
This part of the description will tell you whether or not a property is animatable. If it is, then you can change it's value over time.

Discussion
~~~~~~~~~~
The discussion describes in detail the important things to know about a property.

.Officially
[NOTE]
For more on properties, have a look at the link:https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html[Declared Properties] documentation.

Translating A Property to Code
------------------------------
The following diagram shows you where and how the documentation of a property appears in code:

image::readingDocumentation/propertyTranslate.png["A Property Translated to Code"]

Reading a Method
----------------
Reading a method is similar to reading a property, in that there are 4 things you should be aware of when reading a property's documentation:

- Name
- Return Type
- Class / Instance Type
- Parameters

The following image shows a typical documentation of a property and highlights the 4 main components you should know about...

image::readingDocumentation/method1.png["A Method"]

Name
~~~~
This is the name of the method, without parameters. When you call this method in code it will be filled in with parameters.

Return Type
~~~~~~~~~~~
This is the type of object or data that you will get back from the method. Most often you will see +void+ which means that the method does something but doesn't give you anything back when it's finished. Otherwise, you'll either get an object (e.g. C4Shape) or a data structure (e.g. CGPoint).

Class / Instance Type
~~~~~~~~~~~~~~~~~~~~~
This is a mark at the beginning of the method name, which is either a `-` or a `+`, denoting whether the method can be called from a class or instance object. 

Calling a *class method* looks like this:

[source]
----
[C4Shape rect:CGRectMake(0,0,100,100)];
----

Calling an *instance method* looks like this:

[source]
----
CGFloat pattern[5] = {1,2,3,4,5};
[shape setDashPattern:pattern pointCount:5];
----

You cannot call an instance method from a class. The following will not work:

[source]
----
[C4Shape setDashPattern:pattern pointCount:5]; //will NOT work
----

.See the Difference?
[NOTE]
The difference between class and instance methods is that you can call a class method without first having to define and construct an object. Instance methods only work with objects that have previously been created.

Parameters
~~~~~~~~~~
Parameters are the things a method needs in order to run. Some methods require no parameters, others require many, and some can take a variable number of parameters. When reading a method pay attention to the _type_ of the parameter which is listed right beside the parameter name.

The following source code shows a definition for the `addShape:` method of a `C4Control` object. The method takes _one_ parameter whose type is `C4Shape`.

[source]
----
- (void)addShape:(C4Shape *)aShape;
----

NOTE: Every parameter has a brief discussion about what it is and what its value "should be"... For instance, the _startAngle_ property for the _arc:_ method states "The starting angle of the arc, in radians in the range of (0 .. 2*PI)" meaning that the value of _startAngle_ that *you* pass to the method will be interpreted be between 0 .. 2*PI.

Longer Methods
~~~~~~~~~~~~~~
Reading a method with more parameters is the same as reading one with fewer. The following diagram shows you longer method that has the same 4 things to be aware of.

image::readingDocumentation/method2.png["A Longer Method"]

Translating a Method to Code
----------------------------
The following diagram shows you a translation of the `addShape:` method for a `C4Shape` object:

image::readingDocumentation/method1Translate.png["The addShape Method"]

The following diagram shows you a translation of the `arc:` method for a `C4Shape` object:

image::readingDocumentation/method2Translate.png["A arc Method"]

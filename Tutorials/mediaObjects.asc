Media Objects
=============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

If you're new to C4, you should read this tutorial first because it explains the concept of media objects.

image::mediaObjects/mediaObjects.png["The Object of my Media"]

Media Objects
-------------
Everything, yes, _everything_ in C4 is a media object. All the things you see on screen – e.g. images, shapes and movies – are these little self-contained objects that you can manipulate, change and interact with. You can adjust the visual properties of objects, you can swap one object for another (using iOS transitions if you want), and you can even interact with touch and multitouch on ... wait for it... ANY object.

We've tried to keep the process of working with media objects as similar as possible. This means that working with a movie is as easy as working with a shape, and same for images, sliders, buttons, and so on... When you put something on screen you write something like the following:

[source]
----
[self.canvas addImage:image];
[self.canvas addShape:shape];
[self.canvas addMovie:movie];
----

Similarly, you can position visual objects like this:

[source]
----
image.origin = aPoint;
shape.origin = aPoint;
movie.origin = aPoint;
----

...There are even some common characteristics between visual and non-visual objects:

[source]
----
[image listenFor:@"touchesBegan" runMethod:@"test"];
[audioSample listenFor:@"touchesBegan" runMethod:@"play"];
----

Wait, woah. Non-Visual?...

[[anchor-visnonvis]]
Visual vs. Non-Visual
---------------------
There are 2 primary types of objects in C4: Visual and Non-visual. Pretty easy right? 

Visual objects are all the things you can put on screen:

- shapes
- movies
- images
- buttons
- sliders
- cameras
- scroll views
- text labels
- openGL

Non-visual objects are all the things that you can work with but can't see:

- fonts
- math
- timers
- vectors
- audio samples
- view controllers

C4Object / C4Control
~~~~~~~~~~~~~~~~~~~~
We separated the concept of visual and non-visual objects into 2 distinct categories: _objects_ and _controls_. *Any* object will share all the tricks and code that are in C4Object. All visual objects share some common functionality from C4Control, which provides methods for setting basic styles, position, sizes, and some animations as well. 

[[anchor-speak]]
Speak!
~~~~~~
All objects can speak to one another. The actual term for this is "posting a notification", but it essentially means that throughout your code you can insert little statements like:

[source]
----
[obj postNotification:@"iHaveSpoken"];
----

[[anchor-listen]]
Listen!
~~~~~~~
All objects can listen to one another as well. So, if you want an object to react to something said by another object you can do the following:

[source]
----
[obj listenFor:@"iHaveSpoken" andRunMethod:@"aMethod"];
----

...which will trigger `aMethod` whenever the object hears the `@"iHaveSpoken"` message posted by any object (even itself!). Objects can also listen to specific objects:

[source]
----
[obj listenFor:@"iHaveSpoken" fromObject:aSpecificObject andRunMethod:@"aMethod"];
----

...which will only trigger when `aSpecificObject` has posted a notification.

[[anchor-run]]
Run!
~~~~
Another neat feature is that objects can command themselves to do something after a certain amount of time (i.e. delay). It's pretty easy:

[source]
----
[obj runMethod:@"aMethod" afterDelay:1.0f];
----

...which will trigger `aMethod` after a 1 second wait time.

[[anchor-styles]]
Styles!
~~~~~~~
Aside from being "seen", visual objects have one major difference from non-visual objects: *styles*. You can style a visual object by setting its properties, many of which are common across *all* visual objects. Here's a short list of common properties:

- rotation
- borderWidth
- borderColor
- animationDuration
- animationDelay
- shadowRadius
- shadowColor
- shadowOpacity
- shadowOffset
- shadowPath
- mask
- origin
- center
- width
- height
- zPosition
- ...

...I could go on here, but its better if you have a look at the C4Control documentation.

But Where Do Things Differ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Right. There are a lot of _common_ things between objects, but where they really differ is in the small details for each _kind_ of object. For instance, shapes have a lineWidth property, movies have a play method, labels have a text property, and so on... The real differences between objects come into play when you have a look at the _kind_ of object and its properties. There's too many to list here, but hopefully you'll dig through C4 learning the different kinds of things you can do!

Integration
-----------
Another absolutely essential thing that's cooked into C4 is the integration of various objects... You can combine and combine and combine and combine in tons of different ways! The <<anchor-speak,speak>>, <<anchor-listen,listen>>, and <<anchor-run,run>> tricks mentioned above are great examples of how you can integrate the actions of different objects with one another. You can also use objects to visually influence each other as well, through masking and by adding them to one another.

[[anchor-masking]]
Masking
~~~~~~~
A simple example is masking. The two easiest ways to create masks are to use transparent images, or shapes. You set an object's mask like so:

[source]
----
image.mask = shape;
movie.mask = image;
----

image::mediaObjects/masking.png["Image and Shape Masking"]

Basically, the invisible parts of a mask become transparent and the visual parts stay opaque.

[GITHUB]
You can have a look at the code for https://gist.github.com/C4Tutorials/5304944[masking].

[[anchor-combining]]
Combining
~~~~~~~~~
You can combine objects by adding them to one another. For example, if you wanted to makes something like a face you could create the shape of the head and then add all the facial features to that object. Here's a short example of how you can add a bunch of shapes to another one, and then move the entire group by moving the main shape (e.g. face).

[source]
----
[face addShape:hair];
[face addShape:leftEye];
[face addShape:rightEye];
[face addShape:nose];
[face addShape:mouth];
[face addShape:mouthLine];
[self.canvas addShape:face];
face.center = self.canvas.center;
----

image::mediaObjects/face.png["A Face"]

The key part of this example is the `face.center = ...;` because when you move the face, all the other objects move as well. They have been added to the face to create a combined shape.

[GITHUB]
You can have a look at the code for https://gist.github.com/C4Tutorials/5304505[how to make a face].

Interaction
-----------
Every visual object in C4 can recognize touches and gestures.

Oh, yes! Let me repeat that...

EVERY VISUAL OBJECT IN C4 CAN RECOGNIZE _TOUCHES_ AND _GESTURES_!!!!

The easiest way to add gesture to an object so you can drag it around the screen is like this:

[source]
----
[obj addGesture:PAN name:@"pan" action:@"move:"];
----

Working with gestures and touches is complicated, so we'll leave the details for another tutorial. In the mean time, here are a few important points:

[[anchor-touches]]
Touches
~~~~~~~
The canvas, and every visual object, has a set of methods that get called when the object registers a touch. Here's the list:

- touchesBegan
- touchesBegan:withEvent:
- touchesMoved
- touchesMoved:withEvent:
- touchesEnded
- touchesEnded:WithEvent:
- pressedLong

You can use these to add basic functionality to your objects. A simple example would be to change the color of a shape when it is touched:

[source] 
----
-(void)touchesBegan {
	self.fillColor = ...;
}
----

[[anchor-gestures]]
Gestures
~~~~~~~~
C4 integrates with the iOS gesture recognizer system, which makes adding gestures to you objects a cinch. There are a basic set of gestures you can add:

- TAP
- SWIPERIGHT
- SWIPELEFT
- SWIPEUP
- SWIPEDOWN
- PAN
- LONGPRESS

...and the great thing about these gestures is that you can also easily customize them!

Customizing Gestures
~~~~~~~~~~~~~~~~~~~~
C4 makes customizing gestures quite a bit easier than doing it in pure objective-c. For instance, you can specify the number of taps for a gesture to recognize:

[source]
----
[obj addGesture:TAP name:@"myTapGesture" action:@"aMethod"];
[obj numberOfTapsRequired:2 forGesture:@"myTapGesture"];
----

Other methods that you can use to customize gestures are:

- numberOfTapsRequired:forGesture
- numberOfTouchesRequired:forGesture
- minimumNumberOfTouches:forGesture
- maximumNumberOfTouches:forGesture
- swipeDirection:forGesture
- minimumPressDuration:forGesture

Animation
---------
From the outset, one of the major things I wanted to do with C4 when was to simplify the way of working with animations. I researched a lot, looking at different frameworks, various programming languages, and a ton of techniques for creating animation systems that work with media. Along the way I found a badass framework called *Core Animation* which is sophisticated, mature, and really really powerful.

[TIP]
This guy does a better jobs of explaining http://www.youtube.com/watch?v=pyd8O-2mkgk[Core Animation]. It was introduced in 2007, and has come a really really really long way since then.

[[anchor-animations]]
Automatic Animations
~~~~~~~~~~~~~~~~~~~~
One of the really nice things about C4 is that you can tell your objects to change (position, color, size, etc.) and sit back and watch them animate. Here's an example that will change the `lineWidth` of a shape over the course of 2 seconds:

[source]
----
shape.animationDuration = 2.0f;
shape.lineWidth = 30.0f;
----

Here's another example of changing the width of a movie:

[source]
----
movie.animationDuration = 1.0f;
movie.width = 100.0f;
----

Let's say you create a little OpenGL object and you want rotate it 360 degrees, and then repeat forever:

[source]
----
gl.animationDuration = 5.0f;
gl.animationOptions = REPEAT;
gl.rotation += TWO_PI;
----

There are tons of properties you can animate for almost all visual objects. This is just a taste of what you can do. 

The basic principle, though, of working with animations in C4 is this:

. Simply set your object's `animationDuration` and `animationOptions`
. Change all the animatable values you want to see animated.

That's it.

The End of the Beginning
------------------------
This tutorial was written just to give a very brief overview what what you're going to be working with in C4. It can be a very different way of thinking, but it gets pretty easy after a little while. Once you've made a few experiments in C4 you'll be cruising, building more and more wicked and gorgeous apps.

So, here are a few things to remember:

. there are <<anchor-visnonvis,visual and non-visual>> objects (and they all share similar things)
. objects can <<anchor-speak,speak>>, <<anchor-listen,listen>>, and <<anchor-run,run>>
. visual objects have <<anchor-styles,styles>>
. _everything_ in C4 has interaction, through <<anchor-touches,touches>> and <<anchor-gestures,gestures>>. 
. _everything_ (well, almost everything) in C4 can be <<anchor-animations,animated>>

Be sure to check out other link:/tutorials/[Tutorials] and all the link:/examples/[Examples] which have specific code and more step-by-step instructions.
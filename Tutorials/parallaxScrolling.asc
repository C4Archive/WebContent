Parallax Scrolling
==================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5400120
:vimeo: 64684698

In this tutorial, I'll show you how you can offset the positions of layered scrollviews to create a parallax effect. 

Intro
-----
Scrolling content to create the effect of movement across landscapes has been used for a very long time, especially in animation. Some early examples of its use in games are link:http://en.wikipedia.org/wiki/Moon_Patrol[Moon Patrol], link:http://en.wikipedia.org/wiki/Star_Force[Star Force] and link:http://en.wikipedia.org/wiki/Final_Fight[Final Fight]. The point is to create an illusion of depth in the background of a moving scene. Today, there is lots of interest in using this technique for link:http://webdesignledger.com/inspiration/21-examples-of-parallax-scrolling-in-web-design[websites].

Layer Trick
~~~~~~~~~~~
We're going to set up a project that uses 5 scrollviews as layers on top of one another. The following image is a good example of how layers can be separated, then scrolled,  to create the effect.

image::parallaxScrolling/twwParallax.jpg["The Whispered World"]

ScrollViews
~~~~~~~~~~~
There's a `C4ScrollView object that we're going to use, but this tutorial won't go through the basics of creating them. For that, you can check out the link:/examples/scrollViewImage.php[scrollViewImage] and link:/examples/scrollViewLabel.php[scrollViewLabel] examples. 

image::parallaxScrolling/scrollviews.png["Scrollview Examples"]

Strategy
~~~~~~~~
What we're going to do is the following:

. set up 5 scrollviews
. add a bunch of labels to the scrollviews
. add interaction to the top layer scrollview
. adjust all the other scrollviews when the top-layer is scrolled

Seems pretty straightforward, but there are a few tricks.

5 ScrollViews
-------------
To create 5 scrollviews we're going to use two `for` loops, one nested inside the other. The outer loop will create the 5 views, the inner loop will add the labels to each individual view.

Font and Label
~~~~~~~~~~~~~~
We plan to reuse a font and a label over and over, so we're going to create ones to reference outside the first loop. We also want to keep individual references to each scrollview, so we need some variables for that. Start your workspace off like so:

[source]
----
@implementation C4WorkSpace {
    C4ScrollView *sv1, *sv2, *sv3, *sv4, *sv5;
}

-(void)setup {
    C4Font *font = [C4Font fontWithName:@"AvenirNext-Heavy" size:24];
    C4Label *label = [C4Label labelWithText:@"5" font:font];
	//...
}
----

This gives us 5 references that we'll use later. It also gives us 2 objects, the font and the label, that we'll be able to modify throughout the loops.

Outer Loop
----------
The outer loop is where we're going to construct individual scrollviews. We do this by setting up the details for the labels we'll add, then construct and style the view, and add it to the canvas. Create the outer loop like this:

[source]
----
for(int i = 1; i < 6; i++) {
	//...
}
----

Label Styles
~~~~~~~~~~~~
The first thing we are going to do is style the labels for each scroll view. Add the following to the top of the outer loop:

[source]
----
font.pointSize = 36 * i;
label.text = [NSString stringWithFormat:@"%d",6-i];
label.font = font;
label.backgroundColor = [UIColor colorWithPatternImage:[C4Image imageNamed:@"lines.png"].UIImage];
[label sizeToFit];
---- 

...What this does is create a label whose font size is a factor of 36pts, and sets its text accordingly. For `i = 1` the label will be 5 and the point size 36, for `i = 2` the label will be 4 and point size 72, and so on... We do this so that the scrollviews get added on top of one another with 5 being added first (i.e. in the background) and 1 last (i.e. on top). The top layer will have the largest labels.

We then set the background color to be a transparent image, which just gives us a little bit of context to see the label. 

Constructing A Scrollview
~~~~~~~~~~~~~~~~~~~~~~~~~
Right after styling the label we're going to construct the scrollview for the given layer. We do it in this order so that we can build the layer to fit the size of the label. 

[source]
----
C4ScrollView *currentView = [C4ScrollView scrollView:CGRectMake(0, 0, self.canvas.width, label.height)];
currentView.center = self.canvas.center;
currentView.contentSize = CGSizeMake(currentView.width * 17, currentView.height);
currentView.backgroundColor = [UIColor colorWithWhite:1.0f alpha:0.2f];
currentView.borderColor = C4BLUE;
currentView.borderWidth = 1.0f;
----

We create each scrollview so that it's the width of the canvas and the exact height of the labels that we're putting into it, then we put it in the center of the canvas. Then, we set the `contentSize` of the current view to be _very_ wide (i.e. 17 time wider than the frame of the view). Finally, the `backgroundColor` is set to white to give a nice little fade effect. 

NOTE: My good friend Stefan calls this the fog effect, or something like that. He's Austrian and he was once trying to explain to me how visualizing fog could help us with creating depth in a 2D/3D rendering of text landscapes that we were working on... That talk was about the link:http://www.aec.at/zeitraum/index_en.html[Zeitraum Project] by the link:http://www.aec.at/futurelab/en[Futurelab].

Setting the Var
~~~~~~~~~~~~~~~
Finally, before we add the scrollview to the canvas we run the following code:

[source]
----
if(6 - i == 1) sv1 = currentView;
else if(6 - i == 2) sv2 = currentView;
else if(6 - i == 3) sv3 = currentView;
else if(6 - i == 4) sv4 = currentView;
else if(6 - i == 5) sv5 = currentView;
----

It's not very dynamic, but it basically sets each `sv` variable appropriately. Since we're creating the level-5 scrollview first we need to invert `i` so that we point to the right view (hence, the `6-i`).

Inner Loop
----------
Right after creating the current scrollview, we're going to build a second `for` loop that will populate the scrollview with labels. For simplicity, the labels will all be the same. 

After toying around with different widths, I picked `17` as the number of labels I wanted to have in my scrollviews. I did this because at the end of 17 elements all the numbers line up like they do when the application first starts. 

To add all the labels to the scrollview, we do the following:

[source]
----
for(int j = 0; j < 17; j++) {
    C4Label *currentLabel = [label copy];
    currentLabel.center = CGPointMake(currentView.width/2.0f + currentView.width * j,
                                      currentView.height / 2.0f);
    [currentView addLabel:currentLabel];
}
----

This makes a 17 copies of the label we created in the outer loop and adds each one a regular distance apart. As we scroll through each view we'll be able to see the labels.

Observe!
--------
This is a really important part. There's this thing in programming called Key-Value Observing (KVO) for short. It's a really sophisticated way of making sure that things change when other things change. We're going to take advantage of this to link up all the movements of the scrollviews.

NOTE: It's taken me a long time to actually get a grip on `KVO` having to explain it for this tutorial really had me learn the essentials of creating observable properties. I am probably going to integrate `KVO` into more `C4UIElement` classes in the future.

Add an Observer
~~~~~~~~~~~~~~~
The first step to this is to add an observer. Just after the outer `for` loop, we can write the following:

[source]
----
[sv1 addObserver:self forKeyPath:@"contentOffset" options:NSKeyValueObservingOptionNew context:nil];
----

This says that `self` (in this case the canvas) is going to start observing `sv1` (the top-most scrollview layer). It's going to observe the `contentOffset` and run every time there is a change in that property. At the moment, the `NSKeyValueObservingOptionNew` and `nil` aren't really important but you gotta have them in there for now.

The Observe Method
~~~~~~~~~~~~~~~~~~
We now have to build an observe method that will run every time the `contentOffset` property of `sv1` is changed. In this method we'll handle the displacement of all the scrollviews.

[source]
----
-(void)observeValueForKeyPath:(NSString *)keyPath
                     ofObject:(id)object
                       change:(NSDictionary *)change
                      context:(void *)context {
    //observe here
}
----

Although it has a gross name, it works like a charm. It's time to put in the code that does all the updating:

[source]
----
if((C4ScrollView *)object == sv1) {
    sv2.contentOffset = CGPointMake(sv1.contentOffset.x/2,0);
    sv3.contentOffset = CGPointMake(sv2.contentOffset.x/2,0);
    sv4.contentOffset = CGPointMake(sv3.contentOffset.x/2,0);
    sv5.contentOffset = CGPointMake(sv4.contentOffset.x/2,0);
}
----

We check to make sure that the object coming is in actually `sv1` and then we set the displacement of `sv2` to be _half_ of that for `sv1`. We continue to daisy-chain all the displacement values for each layer until we get to the very last one. In this order each layer moves at half the speed of the one above it.

Wrapping Things Up
------------------
There weren't too many pictures in this tutorial, actually none at all. But, that's mainly because the scrollviews were all invisible... So there wasn't really anything to see. We added 5 scrollviews to the screen in a dynamic way and then added some interaction so that they all scroll at the same time, but at different speeds. This is a pretty rudimentary way of doing parallax scroll tricks, but it works really well. 

All in all, you learned how to dynamically generate scrollviews with content, overlay them and use KVO to link them all up.

In a nutshell, we can now scroll scrollviews while scrolling a scrollview

link:parallaxScrolling/bizarro.jpg[Bizarro]!
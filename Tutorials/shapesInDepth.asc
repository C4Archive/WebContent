Shapes In-depth
===============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

In this tutorial I'll show you a ton of things you can do with `C4Shape` objects. All the things we'll show are unique to shapes and consistent for _all_ shapes. There's tons of style properties, many of which are animatable.

image::shapesInDepth/shapes.png["A Basic Circle"]

Shapes
------
Shapes are objects. They have all the capabilities of touch, movement, animation, and notifications. But, really, deep-down they are views with _paths_ inside of them. What does this mean? It means that shapes are malleable objects (<<anchor-malleable,more on this later>>).

There are 10 types of shapes that you can create:

Ellipses
~~~~~~~~
Circles and ovals can be created by specifying a _frame_ into which the shape will be drawn. You build an ellipse like this:

[source]
----
C4Shape *circle = [C4Shape ellipse:CGRectMake(0,0,100,100)];
----

image::shapesInDepth/shapeCircle.png["A Circle"]

Rectangles
~~~~~~~~~~
Squares and rectangles can be created by specifying a _frame_ into which the shape will be drawn. You build a rectangle like this:

[source]
----
C4Shape *square = [C4Shape rect:CGRectMake(0,0,100,100)];
----

image::shapesInDepth/shapeRect.png["A Square"]

Lines
~~~~~
Lines are polygons that can be created by specifying 2 points. You build a line like this:

[source]
----
CGPoint linePoints[2] = {CGPointMake(x,y),CGPointMake(x,y)};
C4Shape *line = [C4Shape line:linePoints];
----

image::shapesInDepth/shapeLine.png["A line"]

Triangles
~~~~~~~~~
Triangles are polygons that can be created by specifying 3 points. You build a triangle like this:

[source]
----
CGPoint trianglePoints[3] = {CGPointMake(x,y),CGPointMake(x,y),CGPointMake(x,y)};
C4Shape *triangle = [C4Shape triangle:trianglePoints];
----

image::shapesInDepth/shapeTriangle.png["A Triangle"]

Polygons
~~~~~~~~
Polygons can be created by specifying any number of points. You build a polygon like this:

[source]
----
CGPoint polygonPoints[n] = {CGPointMake(x,y),...,...,CGPointMake(x,y)};
C4Shape *polygon = [C4Shape polygon:polygonPoints pointCount:n];
----

image::shapesInDepth/shapePolygon.png["A Polygon"]

GITHUB: Check out this link:https://gist.github.com/C4Tutorials/5358388[gist]

Arcs
~~~~
Arcs can be thought of portions of circles, rotated around a center point. An arc's shape doesn't include the center point. The angles you specify for building an arc are measured in radians. You can also specify whether it draws clockwise or counter-clockwise. You can build an arc like this:

[source]
----
C4Shape *arc = [C4Shape arcWithCenter:self.canvas.center radius:192 startAngle:0 endAngle:PI clockwise:NO];
----

image::shapesInDepth/shapeArc.png["An arc"]

Wedges
~~~~~~
Wedges can be thought of as portions of circles, like pie-slices, they include the center point in their shape. The angles you specify for building an wedge are measured in radians. You can also specify whether it draws clockwise or counter-clockwise. You can build an wedge like this:

[source]
----
C4Shape *wedge = [C4Shape wedgeWithCenter:self.canvas.center radius:192 startAngle:0 endAngle:PI clockwise:NO];
----

image::shapesInDepth/shapeWedge.png["A Wedge"]

Curves
~~~~~~
Curves can be thought of as lines bent around two control points. To create an arc you must specify 2 end points, and 2 control points. You can build a curve like this:

[source]
----
CGPoint endPoints[2] = {CGPointMake(x,y),CGPointMake(x,y)};
CGPoint ctlPoints[2] = {CGPointMake(x,y),CGPointMake(x,y)};
C4Shape *curve = [C4Shape curve:endPoints controlPoints:ctlPoints];
----

image::shapesInDepth/shapeCurve.png["A Bezier Curve"]

Quadratic Curves
~~~~~~~~~~~~~~~~
Curves can be thought of as lines bent towards a single control point. To create an arc you must specify 2 end points, and 1 control point. You can build a quadratic curve like this:

[source]
----
CGPoint endPoints[2] = {CGPointMake(x,y),CGPointMake(x,y)};
CGPoint ctlPoint = CGPointMake(x,y);
C4Shape *quadCurve = [C4Shape quadCurve:endPoints controlPoint:ctlPoint];
----

image::shapesInDepth/shapeCurve.png["A Quadratic Curve"]

Text Shapes
~~~~~~~~~~~
Yes. Yes, you can. Text shapes can be built from a string and a font. 

[source]
----
C4Font *font = [C4Font fontWithName:@"AvenirNext-Heavy" size:240];
C4Shape *text = [C4Shape shapeFromString:@"TEXT" withFont:font];
----

image::shapesInDepth/shapeText.png["A text shape"]

TIP: You can get font names from link:http://www.iosfonts.com[iosfonts.com]

[[anchor-malleable]]
Malleable Shapes
----------------
A really powerful characteristic of shapes is that they can change dynamically. At any point in your application a shape can change from one kind to another. The reason for this is that shapes are actually built from 3 components: a view (i.e. a `C4Control`), a `C4ShapeLayer` and a `UIBezierPath`. When you create a shape you're actually building all three components, the only difference is in the form of the `UIBezierPath`. You can actually specify the path of a shape and it will transform.

BORING!
~~~~~~~
Right, so the details above are boring. 

Changing on the Fly
~~~~~~~~~~~~~~~~~~~
What the above stuff really means is that you can do something like this:

[source]
----
-(void)touchesBegan {
	circle.animationDuration = 2.0f;
	[circle ellipse:CGRectMake(0,0,368,512)];
	circle.center = self.canvas.center;
}
----

image::shapesInDepth/pathAnimation.png["Animating a Path"]

The above code will animate a circle to an ellipse of a different size.

But wait!!! There's more:

[source]
----
[circle rect:...];
[circle line:...];
[circle triangle:...];
[circle polygon:...];
[circle arc:...];
[circle wedge:...];
[circle curve:...];
[circle quadCurve:...];
[circle textShape:...];
----

All of those will do the same thing *change from one shape to the other*. 

If you set the `animationDuration` before calling any of the above methods, the transition will actually *animate*!

NOTE: If you didn't catch it above, the trick is NOT to say `circle = [C4Shape ...]` but rather to call the method directly on the object itself, like this: `[circle rect:...]`



Properties (Animatable)
-----------------------
There are a ton of _animatable_ properties for shapes... just about all of them. In this tutorial we won't show you how to trigger the animations. You can set and adjust the following properties:

fillColor
~~~~~~~~~
The internal color of a shape.

[source]
----
newShape.fillColor = C4RED;
----

image::shapesInDepth/shapePropertiesFillColor.png["Changing the fillColor"]

strokeColor
~~~~~~~~~~~
The color of a shape's outline:

[source]
----
newShape.strokeColor = C4RED;
----

image::shapesInDepth/shapePropertiesStrokeColor.png["Changing the strokeColor"]

lineWidth
~~~~~~~~~
The line width specifies how thick the outline of a shape will be:

[source]
----
newShape.lineWidth = 50.0f;
----

image::shapesInDepth/shapePropertiesLineWidth.png["Changing the lineWidth"]

strokeEnd
~~~~~~~~~
The strokeEnd property is a measure of _where the end of a shape's line occurs_ with 1.0 being the very end of the shape, and 0.0 being the very beginning of the shape...

[source]
----
newShape.strokeEnd = 0.66f;
----

image::shapesInDepth/shapePropertiesStrokeEnd.png["Changing the strokeEnd"]

NOTE: For all shapes, `strokeEnd` defaults to 1.0f

strokeStart
~~~~~~~~~~~
The strokeStart property is a measure of _where the beginning of a shape's line occurs_ with 1.0 being the very end of the shape, and 0.0 being the very beginning of the shape...

[source]
----
newShape.strokeStart = 0.33f;
----

image::shapesInDepth/shapePropertiesStrokeStart.png["Changing the strokeStart"]

NOTE: For all shapes, `strokeStart` defaults to 1.0f

End Points
~~~~~~~~~~
If your shape is a line or a curve you can dynamically update the end points of the shape. 

[source]
----
line.pointA = ...;
curve.pointB = ...;
----

Control Points
~~~~~~~~~~~~~~
If your shape is a curve, you can dynamically update the control point (or points) of the shape:

[source]
----
quadCurve.pointA = ...; //both quad and bezier curves
curve.pointB = ...;     //bezier curves only
----

Path
~~~~
When you've got the chops, you'll be able to actually create a `CGPathRef` on your own and set is as the path for a shape you've already created.

[source]
----
shape.path = path;
---- 

You can also grab the path from a shape to share it or manipulate it or use it for other magic.

[source]
----
CGPathRef aPath = shape.path;
----

SNAAAAAAAAAP!

Properties (Non-Animatable)
---------------------------
There are a ton of _non-animatable_ properties for shapes... You can set and adjust the following properties:

fillRule
~~~~~~~~
The fillRule property specifies how a shape with a winding path will fill its color.

- `FILLNORMAL` is the default `fillRule` mode
- `FILLEVENODD` will fill every _other_ space of overlap

[source]
----
shape.fillRule = FILLNORMAL; //Default
shape.fillRule = FILLEVENODD;
----

image::shapesInDepth/shapePropertiesFillRule.png["FILLNORMAL, FILLEVENODD"]

lineJoin
~~~~~~~~
The lineJoin property specifies how the shape between segments of a line will appear.

- `JOINMITER` is the default lineJoin mode, it creates a point between line segments.
- `JOINBEVEL` creates a squared-off angle between line segments.
- `JOINROUND` creates a rounded angle between line segments.

[source]
----
shape.lineJoin = JOINMITER; //Default
shape.lineJoin = JOINBEVEL;
shape.lineJoin = JOINROUND;
----

image::shapesInDepth/shapePropertiesLineJoin.png["JOINMITER, JOINBEVEL, JOINROUND"]

lineCap
~~~~~~~
The lineCap property specifies how the ends of lines will appear. You can specify the lineCap style like this:

[source]
----
newShape.lineCap = CAPBUTT;
newShape.lineCap = CAPROUND;
newShape.lineCap = CAPSQUARE;
----

image::shapesInDepth/shapePropertiesLineCap.png["CAPBUTT, CAPROUND, CAPSQUARE"]

lineDashPattern
~~~~~~~~~~~~~~~
The lineDashPattern specifies the repeating pattern of dashes and spaces for a line.

The way you order numbers in the pattern always has the form dash-gap-..., meaning that the first number you enter in the pattern will be the size of the first dash, the second will be the size of the first gap, and so on...

To set the lineDashPattern, you need to specify an NSArray of number. 

[source]
----
NSArray *pattern = @[@(10),@(20),@(30),@(40)];    
newShape.lineDashPattern = pattern;
----

image::shapesInDepth/shapePropertiesDashPattern.png["Setting the lineDashPattern"]

.NSArrays & NSNumbers
[NOTE]
NSArrays can only take *objects* and cannot take normal float values, so we have to create special NSNumber objects with the values we want for the line pattern. We do this in short-hand by wrapping `CGFloat` or `NSInteger` values in `@()`. To create an array we use the short-hand `@[]` with a bunch of number values separated by commas.

What am I?
----------
If you've been morphing shapes, and want to know what the shape is at a given moment, you can use the following to check:

[source]
----
shape.isLine;
shape.isArc;
shape.isWedge;
shape.isBezierCurve;
shape.isQuadCurve;
shape.isClosed;
----

Calling any one of the properties mentioned here will return either `YES` or `NO`.

A Note About Colors
-------------------
In this tutorial, we used three preset colors: `C4RED`, `C4GREY`, `C4BLUE`

The default style for shapes is:

[source]
----
fillColor = C4GREY;
strokeColor = C4BLUE;
lineWidth = 5.0f;
----

Wherever you see any of these three colors you can replace them with a `UIColor` instance.

Preset UIColors
~~~~~~~~~~~~~~~
You can get preset UIColor objects:

- `blackColor`
- `darkGrayColor`
- `lightGrayColor`
- `whiteColor`
- `grayColor`
- `redColor`
- `greenColor`
- `blueColor`
- `cyanColor`
- `yellowColor`
- `magentaColor`
- `orangeColor`
- `purpleColor`
- `brownColor`
- `clearColor`

[source]
----
newShape.fillColor = [UIColor magentaColor];
----

Custom UIColors
~~~~~~~~~~~~~~~
You can create custom `RGB` colors using `UIColor` in the following way:

[source]
----
newShape.fillColor = [UIColor colorWithRed:0.0 green:1.0 blue:0.0 alpha:1.0];
----

The above code creates an opaque (i.e. no transparency / alpha) green color.

NOTE: For an in-depth look at colors, check the link:/examples/colorsInDepth.png[Colors In-Depth Tutorial]
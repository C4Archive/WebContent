Getting Things On Screen
========================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5373415

This tutorial will show you how to put 11 different kinds of visual C4 objects onto the screen.

image::gettingThingsOnScreen/gettingThingsOnScreen.png["Getting Things On Screen"]

addIt
-----
The concept of using things in C4 is a little different than most other creative-coding frameworks you may have run across in the past. One of the key ideas behind C4 is to reduce the amount of drawing and system resources to have lighter, longer-lasting applications. This is really important in the case of mobile devices because they have limited resources. 

So, what we have in C4 are _visual objects_ that can be *added* to the canvas.

What does this mean?
~~~~~~~~~~~~~~~~~~~~
This means that _everything_ you see on the screen in C4 is it's own object, something self-contained that handles its own drawing in a really efficient way. 

This also means that you can add an object to the screen and just leave it there _without having to redraw it constantly_. Once an object has been added to the screen it just stays there.

How do I do this?
~~~~~~~~~~~~~~~~~
The canvas is the main place where you will add objects, and to do so you use one of the following calls:

- addCamera:
- addGL:
- addImage:
- addLabel:
- addMovie:
- addShape:
- addUIElement:
- addSubview:

TIP: You can actually add visual objects to one another as well, to make complex objects... But, we'll leave that for link:/tutorials/compositeObjects.php

In Steps
~~~~~~~~
We're going to walk through the code that builds the image show above. To put everything together properly we'll work in steps.

Defining Objects
----------------
We want to build 11 objects and align them vertically across the screen. To do this we'll create each object, then resize them, then position them, then add them to the screen.

@implementation
~~~~~~~~~~~~~~~
To start, we want to define the objects we're going to use in our implementation, like so:

[source]
----
@implementation C4WorkSpace {
    C4Shape *shape;
    C4Movie *movie;
    C4Image *image;
    C4GL *gl;
//    C4Camera *camera;
    C4Label *label;
    C4Button *button;
    C4Slider *slider;
    C4Stepper *stepper;
    C4Switch *onOffSwitch;
    C4ScrollView *scrollView;
    
    NSArray *allObjects;
}
----

We list all our objects here because we need references to them later... We're going to call them from different methods, so we need them to be declared as class variables.

NOTE: We've created an extra `allObjects` array which we'll use in the `shortAdd` method. I've commented out the `C4Camera` object because it doesn't run on the simulator, but if you can run this example on an iPad you should uncomment all the lines for the camera object.

Creating Objects
----------------
One nice thing about object-oriented coding is that you can separate jobs into little bundles. This makes it easier to understand what's happening, and to isolate problems. I've isolated the creation of objects by creating a method called `createObjects`. Like so:

[source]
----
-(void)createObjects {
    shape = [C4Shape ellipse:CGRectMake(0, 0, 128, 128)];
    movie = [C4Movie movieNamed:@"inception.mov"];
    image = [C4Image imageNamed:@"C4Sky"];
    gl = [C4GL glWithFrame:CGRectMake(0, 0, 600, 400)];
//    camera = [C4Camera cameraWithFrame:shape.frame];
    label = [C4Label labelWithText:@"A Label"];
    button = [C4Button buttonWithType:ROUNDEDRECT];
    slider = [C4Slider slider:CGRectMake(0, 0, 128, 44)];
    stepper = [C4Stepper stepper];
    onOffSwitch = [C4Switch switch];
    scrollView = [C4ScrollView scrollView:CGRectMake(0, 0, 128, 96)];

    //...
}
----

So, 10 objects are created with dimensions... But, for the moment some of the dimensions are a bit arbitrary. Why? Because we're going to have a second method that tailors all the objects. 

The reason for the second method is that some objects need extra methods run on them to be useful, or set up; objects like the camera (if you're compiling for a device), the scrollview, and so on. Separating the setup from the instantiation is the kind of "bundling" I was mentioning before.

The allObjects
~~~~~~~~~~~~~~
Before we move on to tailoring the objects, let's do one last little setup. We want to build an array that holds all the objects so that we can later use this array to arrange objects on the canvas. We'll also use it in the `shortAdd` method.

At the end of the `createObjects` method add the following:

[source]
----
    allObjects = @[shape,
                   movie,
                   image,
                   gl,
//                   camera,
                   label,
                   button,
                   slider,
                   stepper,
                   onOffSwitch,
                   scrollView];
----

This creates an array that holds references to all our objects. There's a nice `@[]` shorthand that was introduced into Objective-C last year, which I use to create the array.

Tailoring Objects
-----------------
For lack of creativity, I named the next method `setupObjects`. You can do the same and link:http://www.bonzasheila.com/art/archives/nov05/images/15.%20Klingstedt,Carl%20Gustav%20-%20A%20Monk%20Chastising%20A%20Nun.jpg[chastise] me later for being lazy. 

Create a method called `setupObjects` and add the following to your project:

[source]
----
-(void)setupObjects {
    movie.height = shape.height;
    image.height = movie.height;
    gl.frame = CGRectMake(0, 0, 150, 100);
//    camera.frame = shape.frame;
//    [camera initCapture];
    [label sizeToFit];
    C4Image *table = [C4Image imageNamed:@"C4Table"];
    [scrollView addImage:table];
    scrollView.contentSize = table.bounds.size;
}
----

What we're doing here is:

. setting the height of the movie to match the shape
. setting the height of the image to match the height of the movie
. creating a new frame for the gl object
. //possibly initializing the camera (if you have an ipad)
. resizing the label to fit its text
. adding a new image called `table` to the scrollview
. setting the scroll view's content size to match the size of `table`

Why?
~~~~
We could have done this step in conjunction with the `createObjects` method, but I wanted to be specific about a couple of things. 

. I wanted the `createObjects` method to focus only on the 11 objects we're concerned about in this tutorial. That is, I *didn't* want the creation of `table` in that method.
. I wanted a place where I could isolate the resizing of objects outside of their instantiation
. The concept of `[camera initCapture]` and `[scrollview addImage:]` don't conceptually fit in the "idea" of creating objects, so I wanted these separate as well.
. Since I was going to separate the setup of at least 2 objects, I figured I'd separate all their setups.

Positioning Objects
-------------------
Now that everything has its proper size, you can write a method that positions all the objects. This is our first use of the `allObjects` array. We're going to iterate through all the objects and perform a basic displacement... Since we know that the steps are going to be the same for all objects, we will write a more "generic" bit of code to handle this displacement.

Add the following method to your project:

[source]
----
-(void)positionObjects {
    //...
}
----

Generic Code
~~~~~~~~~~~~
We know two things that are important: 1) that everything in the `allObjects` array is a visual object and 2) that because they're visual , they're _all_ descendants from `C4Object`.

First, we set up a `currentCenter` point that we're going to use to set the positions of all the objects.

[source]
----
CGPoint currentCenter = CGPointMake(self.canvas.center.x, 20);
----

Next, we're going to set up a `for` loop that will iterate over all the objects:

[source]
----
for (int i = 0; i < [allObjects count]; i++) {
    //...
}
----

Then, we're going to start by grabbing each object and _casting_ it as a `C4Object`.

[source]
----
C4Control *obj = (C4Control *)allObjects[i];
----

Now that we have an object, we're going to position it using the following steps:

. shift the `centerPoint` by half the object's height
. position the object
. shift the `centerPoint` by half the object's height again, *plus* a 10.0f pt gap.

[source]
----
currentCenter.y += obj.height / 2.0f;
obj.center = currentCenter;
currentCenter.y += obj.height/2.0 + 10;
----

...and that's that.

Adding
------
There are 2 ways of adding things to the screen: _individually_ and _as a group_. I'll show you how to add in both ways, starting with individually.

Individually
~~~~~~~~~~~~
When you're working with single objects, this is the best way to go about getting them on screen. Add the following method to your code:

[source]
----
-(void)individualAdd {
    [self.canvas addShape:shape];
    [self.canvas addMovie:movie];
    [self.canvas addImage:image];
    [self.canvas addGL:gl];
    //    [self.canvas addCamera:camera];
    [self.canvas addLabel:label];
    [self.canvas addUIElement:button];
    [self.canvas addUIElement:slider];
    [self.canvas addUIElement:stepper];
    [self.canvas addUIElement:onOffSwitch];
    [self.canvas addSubview:scrollView];
}
----

This method takes the reference for each object and calls a specific `add` method on that object. You should always try to adhere to the practice of adding things properly (actually, xcode will throw a warning if you're not doing it properly). 

We've tried to simplify working with these objects to the point where there's lots of stuff going on behind the scenes when you create objects. Sometimes objects need delegates, sometimes they need other things tacked onto them just before they're added to the screen. We bury this in the `add` methods so you don't have to worry about it.

Ok, but that was a lot of code for simply adding everything that I already created... So, let's do a little bit of shorthand.

Adding as a Group
~~~~~~~~~~~~~~~~~
You can add objects as a group by first putting them in an array and then adding the array to the canvas. This is the second chance we have to use the `allObjects` array. 

Add this method to your project:

[source]
----
-(void)groupAdd {
    [self.canvas addObjects:allObjects];
}
----

SIIIIIIIIIIMPLE.

The Setup
---------
Now, with all the methods we've written our main application's `setup` method is clear, simple and easy to read.

[source]
----
-(void)setup {
    [self createObjects];
    [self setupObjects];
    [self positionObjects];
    
    [self individualAdd];
//    [self groupAdd];
}
----

We create our objects, we set them up, we position them and then we either add them individually or as a group.

Removing
--------
And. Yes. You can _remove_ objects just as easily:

[source]
----
[obj removeFromSuperview];
----

This line of code will take the object off of the canvas. If it has a _strong_ reference in your code then it will hang around, otherwise it might get swept up and destroyed if the canvas was the only thing hanging on to it.

NOTE: There's no `[self removeObjects:arrayOfObjects]` method. Maybe in the next release if people ask for it.

Wrapping Things Up
------------------
This short tutorial goes over the concept of adding things to the screen. It's different than other approaches used in creative coding frameworks because you're not going to be _drawing_ things to the screen. In fact, what you're doing is taking on the concept of views and adding objects to the canvas. 

This addition of objects to the canvas may seem trivial but it is an important distinction in how objects are used in C4. 

Ciao.
Complex Shapes
==============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5391050

Okay. So, you want to make a complex shape but the methods in C4 aren't suitable for building things like ... spirals, or other crazy shapes. You're going to need to learn how to build paths from scratch. I'm going to introduce you to working with `CGPathRef` objects through building a spiral.

image::complexShapes/complexShapes.png["Complex Shapes"]

Get A Spiral's Points
---------------------
We're going to build spirals using a bit of polar coordinate math. In general, what you want to do is:

. set a radius
. set an angle
. get a point
. do this for as many points as you want in your shape

64 Points
~~~~~~~~~
We're going to construct a spiral out of 64 points, but before we make an actual shape let's just create a bunch of little circles and put these on the screen to make sure our math is right.

First, create a `for` loop with 64 iterations:

[source]
----
-(void)setup {
    for(int i = 0; i < 64; i++) {
        //spiral wizardry...
    }
}
----

Next, set the radius and angle for the current point (e.g. i):

[source]
----
CGFloat radius = 4 * i;
CGFloat angle = TWO_PI / 16 * i;
----

Then, calculate the current position using polar coordinate math:

[source]
----
CGPoint currentPosition = CGPointMake(radius*[C4Math sin:angle], radius*[C4Math cos:angle]);
currentPosition.x += self.canvas.center.x;
currentPosition.y += self.canvas.center.y;
----

Finally, create a point shape, center it to the current position and add it to the canvas:

[source]
----
C4Shape *point = [C4Shape ellipse:CGRectMake(0, 0, 8, 8)];
point.center = currentPosition;
[self.canvas addShape:point];
----

We get this image:

image::complexShapes/complexShapesPoints.png["A Spiral of Points"]

C'est tout.

Try A Polygon
-------------
Okay, our points look good the 64 little ellipses we put on the canvas are all spiralled out. First thing to try is to build a polygon using those points. Why? Because its probably the easiest way to build a shape. So, let's do it.

If we simplify our code above into creating a set of points and then a polygon from those points we get:

[source]
----
-(void)setup {
    CGPoint polyPts[64];
    
    for(int i = 0; i < 64; i++) {
        polyPts[i] = CGPointMake(4*i*[C4Math sin:TWO_PI/16*i], 4*i*[C4Math cos:TWO_PI/16*i]);
        polyPts[i].x += self.canvas.center.x;
        polyPts[i].y += self.canvas.center.y;
    }
    
    C4Shape *spiral = [C4Shape polygon:polyPts pointCount:64];
    [self.canvas addShape:spiral];
}
----

...Which produces the following image:

image::complexShapes/complexShapesPolygon.png["A Polygon Spiral"]

Now, this isn't quite what we're looking for. True, it *is* a spiral but it's really square because we're only drawing lines from one point to another. Ideally, what we'd like to have is a nice smooth curve between points as well.

Try A CGPath
------------
So, the polygon trick didn't work. Let's try building a path ourselves and see where that gets us.

What's That???
~~~~~~~~~~~~~~
A `CGPath` is an object that represents a graphics path, and it is defined as a part of Core Graphics (hence the CG). A graphics path is a mathematical description of a series of shapes or lines. Each figure in the graphics path is constructed with a connected set of lines and BÃ©zier curves, called a subpath.

TIP: Have a look at the API for link:https://developer.apple.com/library/ios/#documentation/graphicsimaging/Reference/CGPath/Reference/reference.html[CGPath]. 

Build A Mutable Path
~~~~~~~~~~~~~~~~~~~~
As we iterate through our for loop we're going to want to continuously add points to a path that we're building. So, we're going to use a `CGMutablePathRef` object because we want to change it with every step.

Start by creating a path at the {0,0} point of the canvas.

[source]
----
-(void)setup {
    CGMutablePathRef spiralPath = CGPathCreateMutable();
    CGPathMoveToPoint(spiralPath, nil, 0, 0);
	//...
}
----

See how we run `CGPathMoveToPoint()`? You'll always have to do this to get the path to move to the point where you want to start its drawing. Always.

Populate The Path
~~~~~~~~~~~~~~~~~
Just like we did before, we're going to use a `for` loop to populate the path. To do this, let's first create the loop and calculate the `radius` and `angle`:

[source]
----
for(int i = 1; i < 64; i++) {
    CGFloat radius = 4 * i;
    CGFloat angle = TWO_PI/16 * i;
    //...
}
----

Then, calculate the `nextPoint` that we're going to add to the path:

[source]
----
CGPoint nextPoint = CGPointMake(radius*[C4Math sin:angle], radius*[C4Math cos:angle]);
----

Finally, add that point the the path:

[source]
----
CGPathAddLineToPoint(spiralPath, nil, nextPoint.x, nextPoint.y);
----

Wham. That's it, all the 64 points we created for the images above will now be part of our path.

Make A Shape
------------
With our path in hand, let's create a shape and the swap in our path. The first thing we want to do is create a shape using the frame of our path.

Right after the `for` loop, grab the frame of the mutable path like this and use it to build a shape:

[source]
----
CGRect frame = CGPathGetBoundingBox(spiralPath);
C4Shape *spiral = [C4Shape rect:frame];
----

We're using a `rect` here, but it doesn't really matter (we could have also used an ellipse). It doesn't matter what the shape actually is, what's important is that the frame is the right size.

Set The Path
~~~~~~~~~~~~
Now that we have a shape with the right frame, let's swap in our `path` element and add it to the canvas:

[source]
----
spiral.path = spiralPath;
spiral.center = self.canvas.center;
[self.canvas addShape:spiral];
----

We get this:

image::complexShapes/complexShapesSpiralOffset.png["A Spiral Path Offset"]

...which doesn't look right! We expect the spiral to be centered right? Let's change the background color of the shape to see what's going on:

image::complexShapes/complexShapesSpiralOffsetBackground.png["A Spiral Path Offset"]

...It looks like the spiral starts at the {0,0} point of the shape, which actually makes sense. We built the spiral starting at {0,0} and since we're adding it to the shape it's actually starting at the right point.

Translate The Path
~~~~~~~~~~~~~~~~~~
To get the spiral path into the right position in the shape we're going to apply a translation to the path. The translation will shift all the points so that they don't start anymore at the {0,0}.

Before setting the `spiral.path = ...;` add the following:

[source]
----
const CGAffineTransform translate = CGAffineTransformMakeTranslation(-frame.origin.x, -frame.origin.y);
spiral.path = CGPathCreateCopyByTransformingPath(spiralPath, &translate);
----

This builds a `CGAffineTransform` to the path and uses create a *copy* of the original `spiralPath` which is offset by the value of the translation.

Now we get:

image::complexShapes/complexShapesSpiralCenteredBackground.png["A Spiral Path Centered"]

...And, taking away the background color we get our spiral:

image::complexShapes/complexShapesSpiralCentered.png["A Spiral Path Centered"]

Uhhhhhhh...
~~~~~~~~~~~
It's pretty obvious that we've taken a lot of steps just to produce the same thing as calling `[C4Shape polygon:...]` which seems like a waste of time? Well, it isn't. What we've done is exactly what the internals of the polygon method does when you create a shape this way, so you've learned a pretty complex way of making shapes. 

But! With our polygon we can actually make some modifications to our code and get some fancier shapes that we couldn't get with any of the C4 methods.

Modifying The Path
------------------
There are quite a few functions you can call to add points, lines and shapes to a `CGMutablePathRef` object. In the previous section we used this function:

[source]
----
CGPathAddLineToPoint(spiralPath, nil, nextPoint.x, nextPoint.y);
----

This simply adds a line from one point to another. What we really want to do, though is have a slight curve between points. To do this we're going to use the following trick:

[source]
----
CGPoint nextPoint = CGPointMake(radius*[C4Math sin:angle], radius*[C4Math cos:angle]);
CGPoint controlPoint = CGPointMake(radius*[C4Math sin:angle - TWO_PI/32],
                                   radius*[C4Math cos:angle - TWO_PI/32]);
CGPathAddQuadCurveToPoint(spiralPath, nil, controlPoint.x, controlPoint.y, nextPoint.x, nextPoint.y);
----

What this does it create a quadratic curve between each of the 64 points. It does so by calculating a mid-point (e.g. the next point minus half a rotation) between the current and next points. Afterwards it uses this new point as a control for shaping the quadratic curve.

What we get is:

image::complexShapes/complexShapes.png["A Smooth Spiral"]

link:complexShapes/smooth.jpg[Smoooooooth].

Alternatives
~~~~~~~~~~~~
While I was making this tutorial I tried out a few alternatives to the smooth version of the spiral. If we modify the addition of points in the following ways we get a variety of different looks to our shape. The important thing to note is that all these variations actually create _single paths_.

If we use the `CGPathAddRelativeArc` function like so:

[source]
----
CGPathAddRelativeArc(spiralPath, nil, nextPoint.x, nextPoint.y, radius, 0, TWO_PI/16);
----

We get this shape:

image::complexShapes/complexShapesRelativeArc.png["Spiral Relative Arcs"]


If we change the value `0` to that of `angle` like so:

[source]
----
CGPathAddRelativeArc(spiralPath, nil, nextPoint.x, nextPoint.y, radius, angle, TWO_PI/16);
----

...Then, we get this shape:

image::complexShapes/complexShapesRelativeArcAngle.png["Spiral Relative Arcs"]

If we change the value of the `nextPoint` so that all the drawing happens around the {0,0} point, like so:

[source]
----
CGPathAddRelativeArc(spiralPath, nil, 0,0, radius, angle, TWO_PI/16);
----

Then we get a saw-tooth look like this:

image::complexShapes/complexShapesRelativeArcZeroPoint.png["Spiral Relative Arcs"]

Finally, if we take our smooth arc approach and modify the control point so that it's way out compared to the current points, like so:

[source]
----
radius *= 1.5f;
CGPoint controlPoint = CGPointMake(radius*[C4Math sin:angle - TWO_PI/32],
                                   radius*[C4Math cos:angle - TWO_PI/32]);
CGPathAddQuadCurveToPoint(spiralPath, nil, controlPoint.x, controlPoint.y, nextPoint.x, nextPoint.y);
----

...we get the following:

image::complexShapes/complexShapesDistortedQuad.png["Spiral Distorted Quad Curves"]

Wrapping Things Up
------------------
This tutorial took you through the process of building your own path and then swapping that into a shape. Along the way you actually learned how C4 builds polygon shapes (including translating the path into the right position). From there you were able to use different `CGPath` functions to create variations on your shape.

Other Functions
~~~~~~~~~~~~~~~
Though this isn't a full explanation of `CGPath` and all its functions, you've gotten enough of a taste to try things out on your own. Other path-building functions that you can play around with are:

[source]
----
CGPathAddArc
CGPathAddRelativeArc
CGPathAddArcToPoint
CGPathAddCurveToPoint
CGPathAddLines
CGPathAddLineToPoint
CGPathAddPath
CGPathAddQuadCurveToPoint
CGPathAddRect
CGPathAddRects
CGPathApply
CGPathMoveToPoint
CGPathCloseSubpath
CGPathAddEllipseInRect
----

Go Forth.
Swipe Gestures
==============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5421765
:vimeo: 64685113

There are 4 basic swipe methods that come cooked into all visual objects in C4. In this tutorial I'll show you how to use them.

Here We Go
----------
Cooked into all visual objects are 4 methods you can use for interaction:

- swipedUp
- swipedDown
- swipedLeft
- swipedRight

You can use these methods without needing to be declared, just like `touchesBegan`, `touchesMoved` and `touchesEnded`.

The Variables
~~~~~~~~~~~~~
For this example we're going to create a label whose text changes depending on the direction of a swipe. After a couple of seconds the label is going to return to its original text. To do this we're going to add the following variables to your project:

[source]
----
@implementation C4WorkSpace {
    C4Label *swipeLabel;
    C4Timer *resetTimer;
}
----

The reset timer will trigger the change back to the original text.

Label Setup
~~~~~~~~~~~
To create the label, add the following to your project:

[source]
----
-(void)setupLabel {
    C4Font *font = [C4Font fontWithName:@"Helvetica" size:96];
    
    swipeLabel = [C4Label labelWithText:@"Swipe Me" font:font];
    [swipeLabel sizeToFit];
    swipeLabel.textAlignment = ALIGNTEXTCENTER;
    swipeLabel.center = self.canvas.center;
    swipeLabel.userInteractionEnabled = NO;
    [self.canvas addLabel:swipeLabel];
}
---- 

This simply creates a font and a label which it then adds to the screen. We center the text, and make sure that it's interaction is turned off so that it doesn't interfere with any swipes we perform.

Oh yeah, make sure to call this from your `setup` like so:

[source]
----
-(void)setup {
    [self setupLabel];
    //...
}
----

Label Updating
~~~~~~~~~~~~~~
To update a label we're going to give it some new text and recenter it based on the length of that text. Then, we're going to trigger a timer to wait for 2 seconds before resetting the text to its original message. Add the following method to your project:

[source]
----
-(void)updateLabelWithText:(NSString *)newLabelText {
    swipeLabel.text = newLabelText;
    [swipeLabel sizeToFit];
    swipeLabel.center = self.canvas.center;
    
    [resetTimer invalidate];
    resetTimer = [C4Timer automaticTimerWithInterval:2.0f target:self method:@"resetLabel" repeats:NO];
}
----

Pretty straightforward. The only thing to do now it to make sure we have a method that resets the label (it's going to get called by the timer). Add the following to your project:

[source]
----
-(void)resetLabel {
    swipeLabel.text = @"Swipe Me";
    [swipeLabel sizeToFit];
    swipeLabel.center = self.canvas.center;
}
----

TIP: The `NO` part of the message for the timer means that it's only going to trigger one time. The `[restTimer invalidate]` makes sure to stop the timer if it already is counting down, this lets us reset it to 2 seconds.

The Swipes
----------
Now we want to add the swipe methods to our project. Remember, _all_ visual objects have these methods cooked into them. Add the following methods to your project:

[source]
----
-(void)swipedDown {
    [self updateLabelWithText:@"DOWN"];
}

-(void)swipedLeft {
    [self updateLabelWithText:@"LEFT"];
}

-(void)swipedRight {
    [self updateLabelWithText:@"RIGHT"];
}

-(void)swipedUp {
    [self updateLabelWithText:@"UP"];
}
----

We're just overriding each of these so that they trigger the `updateLabelWithText:` with the appropriate message. 

Add'em
~~~~~~
Now it's time to add our listening code. This is the same procedure as listening for `touchesBegan` or the like. Add the following lines to your `setup` method:

[source]
----
[self addGesture:SWIPEDOWN name:@"down" action:@"swipedDown"];
[self addGesture:SWIPELEFT name:@"left" action:@"swipedLeft"];
[self addGesture:SWIPERIGHT name:@"right" action:@"swipedRight"];
[self addGesture:SWIPEUP name:@"up" action:@"swipedUp"];
----

Now, when you swipe the canvas in any direction you're going to see the label change! (and reset 2 seconds after the last swipe was made).

Listen
------
For a last huzzah, and to show you that these methods work the same way as `touchesBegan` etc., add the following methods to your project:

[source]
----
-(void)setupListeners {
    [self listenFor:@"swipedUp" andRunMethod:@"checkMessage:"];
    [self listenFor:@"swipedDown" andRunMethod:@"checkMessage:"];
    [self listenFor:@"swipedLeft" andRunMethod:@"checkMessage:"];
    [self listenFor:@"swipedRight" andRunMethod:@"checkMessage:"];
}

-(void)checkMessage:(NSNotification *)notification {
    C4Log([notification name]);
}
----

This listens for when a gesture is triggered and runs a method that simply prints out the name of the gesture's notification. We could have added a call to `checkMessage:` in each of the swipe methods, but there's a good reason to do it this way.

When a `SWIPE` gesture is added to an object and its action is one of `swipedDown`, `swipedUp`, `swipedLeft`, `swipedRight` it will post a notification using the action's name. This is the same for when you `listenFor:` any of `touchesBegan`, `touchesMoved`, `touchesEnded` or `touchesCanceled`. The main difference is that gestures for swipes need to be added where touches come already cooked into each by default.

Wrapping Things Up
------------------
Short and sweet, this tutorial showed you how to use the default swipe gesture methods so that you can call your own methods when each of them happens. It also showed you how to set up a timer to reset everything after a few seconds. Finally, you were also introduced to the idea of being able to `listenFor` gestures.

I'm outta here, high five.
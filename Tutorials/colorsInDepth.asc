Colors In-depth
===============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

In this tutorial I'll introduce you to the `UIColor` class, which you'll use to create colors in C4. This tutorial will be a bit high-level, leaving the details of implementation to various examples. You'll find links to examples peppered throughout the tutorial.

Oh Color
--------
You'll use colors a lot when working in C4. They can be applied to the `strokeColor` and `fillColor` of shapes, to the `borderColor`, `backgroundColor` and `shadowColor` of visual objects, to the various states of `C4UIElements` like buttons and sliders and so on. 

You'll use them everywhere, and because the C4 framework uses `UIColor` (i.e. native Objective-C) it's a good idea to create a thorough introduction to the class.

Why the UI?
~~~~~~~~~~~
A great question is "why isn't there a `C4Color`?"... 

This was a big decision for me when I was creating C4. After a long time deciding whether to do what's been done with other objects (i.e. wrap them in `C4Object` or `C4Control`). There were a two main reasons that sold me on this technique.

You're Learning iOS
~~~~~~~~~~~~~~~~~~~
I wanted C4 to be the kind of API that would springboard people into programming native iOS applications. `UIColor` is one of those classes that just doesn't need to be subclassed, and because of this it just made sense to have it be one of the ties to get you into native programming. 
 
Because They Say So
~~~~~~~~~~~~~~~~~~~
Seriously. `UIColor` has been engineered so that you'll only ever have to subclass it in very rare circumstances. A quick scan of the link:http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIColor_Class/[official documentation] reads ``Most developers should have no need to subclass UIColor. The only time doing so might be necessary is if you require support for additional colorspaces or color models.``

C4 Colors
---------
There are 3 default colors you can use in C4. 

- `C4RED`
- `C4BLUE`
- `C4GREY`

These are the colors of the logo and are cooked into the API. So, any time you want to use a default color you can write something like:

[source]
----
shape.strokeColor = C4RED;
label.textColor = C4BLUE;
movie.shadowColor = C4GREY;
----

TIP: Have a look at the link:http://c4ios.com/examples/C4Colors[C4 Colors] example.

Preset Colors
-------------
There are a bunch of preset colors that you can access through the `UIColor` class. You can create a preset color by writing something like this:

[source]
----
shape.fillColor = [UIColor blueColor];
----

Basic Presets
~~~~~~~~~~~~~
There are 15 preset colors that you can use. To do so, you might replace the `blueColor` (from the code above) with any of the following list:

- `blackColor`
- `blueColor`
- `brownColor`
- `cyanColor`
- `darkGrayColor`
- `grayColor`
- `greenColor`
- `lightGrayColor`
- `magentaColor`
- `orangeColor`
- `purpleColor`
- `redColor`
- `whiteColor`
- `yellowColor`
- `clearColor`

image::colorsInDepth/colorsInDepthPreset1.png["Presets"]

image::colorsInDepth/colorsInDepthPreset2.png["Presets"]

image::colorsInDepth/colorsInDepthPreset3.png["Presets"]

That `clearColor` is a nice object that essentially fills with no color whatsoever. You can use `clearColor` in instances where you don't want to see the line or the fill of a shape.

TIP: Have a look at the link:http://c4ios.com/examples/colorPredefined[Predefined Colors] example.

System Presets
~~~~~~~~~~~~~~
There are 5 preset colors that your operating system uses, and you can access them just like the basic presets. Here's the list:

- `lightTextColor`
- `darkTextColor`
- `viewFlipsideBackgroundColor`
- `scrollViewTexturedBackgroundColor`
- `underPageBackgroundColor`

image::colorsInDepth/colorsInDepthSystemPresets.png["Presets"]

TIP: Have a look at the link:http://c4ios.com/examples/colorSystem[System Colors] example.

Custom Colors
-------------
For the most part, you'll be wanting to create your own custom colors. There are a bunch of different ways to do so:

[source]
----
[UIColor colorWithRed:1.0f green:0.0f blue:0.0f alpha:1.0f];
[UIColor colorWithWhite:1.0f alpha:1.0f];
[UIColor colorWithPatternImage:aUImage];
[UIColor colorWithHue:1.0f saturation:0.0f brightness:0.0f alpha:1.0f];
[UIColor colorWithCGColor:aCGColor];
[UIColor colorWithCIColor:aCIColor];
----

The method's listed above are the main ways you're going to be creating colors, and I've listed them in descending order of how often I use them. The last 3 you'll probably not be using very often, but from time to time it's good to know that they're there. The `colorWithPatternImage:` is a pretty interesting method. 

TIP: Have a look at the link:http://c4ios.com/examples/colorRGBA[RGB] and link:http://c4ios.com/examples/colorHSBA[HSB] examples.

Alpha'd Colors
~~~~~~~~~~~~~~
One of the really nice components of the `UIColor` class is that you can create new colors with different alpha values from a single object. You can do this with _all_ colors even `C4RED`, `C4BLUE` and `C4GREY`.

[source]
----
UIColor *newColor = [oldColor colorWithAlphaComponent:0.5f];
----

image::colorsInDepth/colorsInDepthTransparent.png["Transparent Colors"]

TIP: Have a look at the link:/examples/colorWithAlpha.php[Transparent Colors] example

Pattern Images
~~~~~~~~~~~~~~
Fancy. Fancy. You can use _images_ as the basis for generating a color!

[source]
----
UIColor *c = [UIColor colorWithPatternImage:aC4Image.UIImage];
----

image::colorsInDepth/colorsInDepthPatternImage.png["Pattern Image Colors"]

TIP: Have a look at the link:http://c4ios.com/examples/colorPatternImage.php[Pattern Image] example

Please remember, most of our other link:/tutorials/[tutorials] are more fun.

Thank you for being patient.
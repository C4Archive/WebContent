MultiCanvas
===========
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://github.com/C4Tutorials/MultiCanvas
:vimeo: 64684611

Okay, now we're getting into some cool territory. This tutorial will show you how to build an application that uses multiple canvases and a navigation bar that lets you switch between them.

From the Ground UP
------------------
We're going to work backwards through building this application, first focusing on subclassing `C4CanvasController` to create multiple workspaces. After we have all the workspaces built, we'll then get into how to navigate between them. We have to do it this way because our main `setup` method won't make sense until the end.

Steps
~~~~~
We're going to take the following steps to make this happen:

. Build a `WorkSpaceA` object whose canvas has a shape and a label.
. Build a `WorkSpaceB` object whose canvas has a shape and a label.
. Build a `WorkSpaceC` object whose canvas contains *copies* of `WorkSpaceA` and `WorkSpaceB`.
. Build a `NavigationBar` and populate it with buttons
. Connect those buttons to methods that switch between canvases
. Add the first canvas (i.e. `WorkSpaceA`) to our main canvas.

That's it... Let's get going.

WorkSpace A
-----------
To work with multiple canvases, we have to first create a subclass of `C4CanvasController` that we can use as a workspace for our new canvas. Subclassing is fairly straightforward, if you don't know how to do it yet you should check out the link:/tutorials/subclassing.php[subclassing] tutorial. Either way, you should be able to follow along with this tutorial.

image::multiCanvas/workspaceA.png["WorkSpace A"]

Create a Subclass
~~~~~~~~~~~~~~~~~
To create a subclass of `C4CanvasController`, you can click on `File > New > New File`, like so:

image::multiCanvas/multiCanvasMenu.png["Create a New File"]

You'll get a popup window that lets you choose the kind of file you want to create. From the left-hand column select *Cocoa Touch*, and from the options that appear on the right select *Objective-C Class*, like so:

image::multiCanvas/objcClass.png["Create a New Objective-C Class"]

Next, you'll be prompted for the name of the file you want to create, and its kind. First change the *subclass of* option to `C4CanvasController` and then overwrite the *class* option with `WorkSpaceA`. Finally, select *both* the "Targeted for iPad" and "With XIB for user interface" options. You should see the following:

image::multiCanvas/options.png["Options for the New Class"]


... hit *Next* and Xcode will build you a set of 3 files. 

image::multiCanvas/threeFilenames.png["Three Files"]

Lather, Rinse, Repeat
~~~~~~~~~~~~~~~~~~~~~
Do the previous steps 2 more times, creating `WorkSpaceB` and `WorkSpaceC` subclasses. Your project should now have the following list of files:

image::multiCanvas/nineFilenames.png["Nine Files"]

Changing The Views
~~~~~~~~~~~~~~~~~~
So, you asked Xcode to build you 3 XIB files. These are _Interface Builder_ files that you could potentially use to do some drag and drop design for your application's interface. We need to make a simple change to each one of these files. You can do the following steps with _each_ file you created.

First, click on the `WorkSpaceA.xib` file, and you'll see your code window replaced by a view of the Interface Builder. 

image::multiCanvas/interfaceBuilder.png["Interface Builder"]

Reveal the *Utilities* panel. Click on the interface view (it should have a little blue border around it now) and then in the utilities panel select the *Identity Inspector*. You should now see this:

image::multiCanvas/UIView.png["Identity Inspector UIView"]

At the top of the identity inspector is a section called *Custom Class* which has a little text window with a title called *Class*. The default class for the view is `UIView`. 

Change the class to read `C4View`, like so:

image::multiCanvas/C4View.png["Identity Inspector C4View"]

Now, _do this for the other 2 workspaces_.

TIP: The identity inspector icon is the 3rd from the left at the top of the utilities panel.

Code
~~~~
We're going to add a label a shape and a simple touch interaction to `WorkSpaceA`. You can start by _deleting_ the following from the implementation:

[source]
----
@interface testViewController ()

@end
----

...also delete the following:

[source]
----
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
----

Now, you can add the following class variables to the implementation:

[source]
----
@implementation WorkSpaceA {
    C4Label *label;
    C4Font *font;
    C4Shape *circle;
    BOOL animating;
}
---- 

Next, we're going to setup our shape and our label for this class. Add a `setup` method that has the following code:

[source]
----
-(void)setup {
    circle = [C4Shape ellipse:CGRectMake(0, 0, 368, 368)];
    circle.lineWidth = 50.0f;
    circle.center = self.canvas.center;
    [self.canvas addShape:circle];
    
    font = [C4Font fontWithName:@"Avenir" size:92];
    label = [C4Label labelWithText:@"WorkSpace A" font:font];
    label.backgroundColor = [UIColor whiteColor];
    label.center = self.canvas.center;
    label.zPosition = 2;
    [self.canvas addLabel:label];

    self.canvas.borderColor = C4BLUE;
    self.canvas.borderWidth = 1.0f;
}
----

This method creates a large circle with a thick border. It adds the name of the workspace to a label over top of the shape, and then gives a little border to the canvas.

Finally, add the following `touchesBegan` method to the workspace:

[source]
----
-(void)touchesBegan {
    if(animating == NO) {
        circle.animationDuration = 4.0f;
        circle.animationOptions = REPEAT | AUTOREVERSE;
        circle.strokeStart = 1.0f;
        animating = YES;
    }
}
----

The first time you tap the canvas this code will trigger an animation on the shape's `strokeStart` property.

Done With A
~~~~~~~~~~~
We're done with `WorkSpaceA` for now.

WorkSpaceB
----------
We're going to set up `WorkSpaceB` in much the same way as we did the previous workspace. The slight differences between the two are that:

- the shape is a square
- the shape's `strokeColor` is red
- the animation rotates the shape

image::multiCanvas/workspaceB.png["WorkSpace B"]

Code
~~~~
The code for `WorkSpaceB` is like so:

[source]
----
#import "WorkSpaceB.h"

@implementation WorkSpaceB {
    C4Label *label;
    C4Font *font;
    C4Shape *square;
    BOOL animating;
}

-(void)setup {
    square = [C4Shape rect:CGRectMake(0, 0, 368, 368)];
    square.lineWidth = 50.0f;
    square.strokeColor = C4RED;
    square.center = self.canvas.center;
    [self.canvas addShape:square];
    
    font = [C4Font fontWithName:@"Avenir" size:92];
    label = [C4Label labelWithText:@"WorkSpace B" font:font];
    label.backgroundColor = [UIColor whiteColor];
    label.center = self.canvas.center;
    [self.canvas addLabel:label];
    
    self.canvas.borderColor = C4RED;
    self.canvas.borderWidth = 1.0f;
}

-(void)touchesBegan {
    if(animating == NO) {
        square.animationDuration = 4.0f;
        square.animationOptions = REPEAT | AUTOREVERSE;
        square.rotation = TWO_PI;
        animating = YES;
    }
}

@end
----

Done With B
~~~~~~~~~~~
That's it. We do the same steps for this workspace as we did the first, and we're done. 

WorkSpace C
-----------
I originally made this example with 2 canvases, but afterwards thought it would be good to show how you can make _copies_ of those canvases and host them in another completely different canvas. 

That's what we're going to do now.

image::multiCanvas/workspaceC.png["WorkSpace C"]

Import
~~~~~~
First things first. Since we're going to be working with other workspace classes, we're going to have to `#import` them into our `WorkSpaceC`. It's pretty easy. At the top of your file you should write the following:

[source]
----
#import "WorkSpaceC.h"
#import "WorkSpaceA.h"
#import "WorkSpaceB.h"
----

The `"WorkSpace.C.h"` part will already be in your file, you just have to add the `A` and `B` parts.

Variables
~~~~~~~~~
Now, for the variables part of the `WorkSpaceC` implementation, make one for each `A` and `B`, like so:

[source]
----
@implementation WorkSpaceC {
    WorkSpaceA *workspaceA;
    WorkSpaceB *workspaceB;
}
----

Setup
~~~~~
Just like you did with the first two classes, delete all the nonsense in the implementation file and replace them with a `setup` method. Then, we're going to _initialize_ the two workspace objects that we defined in our variables.

[source]
----
-(void)setup {
    workspaceA = [[WorkSpaceA alloc] initWithNibName:@"WorkSpaceA" bundle:[NSBundle mainBundle]];
    workspaceB = [[WorkSpaceB alloc] initWithNibName:@"WorkSpaceB" bundle:[NSBundle mainBundle]];
    //...
}
----

We use the `initWithNibName` method which looks inside the "bundle" of our application and finds the correct `xib` file you specify. This builds the canvases for us. 

We can now start positioning the two other canvases in this canvas. Add the following code to do so:

[source]
----
CGFloat offset = self.canvas.width * 0.01f;

workspaceA.canvas.frame = CGRectMake(offset,offset, self.canvas.width - 2 * offset,(self.canvas.height - offset * 3)/2.0f);
workspaceB.canvas.frame = CGRectMake(offset,offset * 2 + workspaceA.canvas.height, workspaceA.canvas.width, workspaceA.canvas.height);
workspaceB.canvas.clipsToBounds = YES;
----

The `offset` helps us make the canvases of `WorkSpaceA` and `WorkSpaceB` _slightly_ smaller in width than that of our `WorkSpaceC` canvas. The rest of the code simply sets the frames of each canvas, and then tells `WorkSpaceB`s canvas to clip its contents. We set the clipping because when the square starts rotating it would otherwise have its corners visible outside the frame of the smaller canvas. 

Finally, set up the two canvases and then add them to our `WorkSpaceC`s canvas, like so:

[source]
----
[workspaceA setup];
[workspaceB setup];

[self.canvas addObjects:@[workspaceA.canvas, workspaceB.canvas]];
----

C4WorkSpace
-----------
Now we're getting somewhere. We have our other 3 workspaces all ready to go. All we have to do now is create the main canvas and set up the navigation to handle switching between the 3 canvases for those workspaces.

Import
~~~~~~
Just like we did before, we have to import references to our 3 workspaces. Add the following to your `C4WorkSpace` implementation:

[source]
----
#import "C4WorkSpace.h"
#import "WorkSpaceA.h"
#import "WorkSpaceB.h"
#import "WorkSpaceC.h"
----

Variables
~~~~~~~~~
Next, we're going to want to set up variables so we can reference the various workspaces as well as the `currentView` which we need for switching (I'll explain this in a bit).

[source]
----
@implementation C4WorkSpace {
    WorkSpaceA *workspaceA;
    WorkSpaceB *workspaceB;
    WorkSpaceC *workspaceC;
    C4View *currentView;
}
----

Create WorkSpaces
~~~~~~~~~~~~~~~~~
This step is pretty straightforward, actually it's really similar to what we did in `WorkSpaceC`. Create the following method:

[source]
----
-(void)createWorkSpaces {
    workspaceA = [[WorkSpaceA alloc] initWithNibName:@"WorkSpaceA" bundle:[NSBundle mainBundle]];
    workspaceB = [[WorkSpaceB alloc] initWithNibName:@"WorkSpaceB" bundle:[NSBundle mainBundle]];
    workspaceC = [[WorkSpaceC alloc] initWithNibName:@"WorkSpaceC" bundle:[NSBundle mainBundle]];
    
    CGFloat offSet = self.canvas.width * 0.05f;
    workspaceA.canvas.frame = CGRectMake(offSet,
                                         offSet,
                                         self.canvas.width - 2 * offSet,
                                         self.canvas.height - 44 - 2 * offSet);
    workspaceB.canvas.frame = workspaceA.canvas.frame;
    workspaceC.canvas.frame = workspaceB.canvas.frame;
    
    [workspaceA setup];
    [workspaceB setup];
    [workspaceC setup];

    [self.canvas addSubview:workspaceA.canvas];
    currentView = (C4View *)workspaceA.canvas;
}
----

This method initializes the 3 workspaces, creates a bit of an offset and then sets their frames. It then runs `setup` on all three and then finishes off by adding only the *canvas* of `WorkSpaceA` to our main canvas. We don't need to add the other ones because we're going to use some fancy `UIView` switching a little bit later.

Finally, add the following line to the main workspace's `setup`:

[source]
----
-(void)setup {
    [self createWorkSpaces];
    //...
}
----

Create ToolBar
~~~~~~~~~~~~~~
The next thing we're going to do is create a `UIToolBar` object that will have 3 buttons. Each Button will link to a method that will do some switching between the current view and one of the other workspaces. 

Create a method called that will set up a tool bar for us, like so:

[source]
----
-(void)createToolBar {
    CGRect toolBarFrame = CGRectMake(0, self.canvas.height - 44, self.canvas.width, 44);
    UIToolbar *toolBar = [[UIToolbar alloc] initWithFrame:toolBarFrame];
    toolBar.barStyle = UIBarStyleBlackTranslucent;
    //....
}
----

This step creates a frame for the tool bar that is 44 points high, the width of the canvas, and positioned at the bottom of the canvas. It also gives the tool bar a translucent style.

Next, we're going to add a bunch of button items to the toolbar. Specifically, we're going to add 3 buttons sandwiched between 2 invisible flexible items. This sandwiching will center the 3 buttons for us.

Add the following code to the `createToolBar` method:

[source]
----
UIBarButtonItem *flexible = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                                          target:nil
                                                                          action:nil];

UIBarButtonItem *b1 = [[UIBarButtonItem alloc] initWithTitle:@"WorkSpace A"
                                                       style:UIBarButtonItemStyleBordered
                                                      target:self
                                                      action:@selector(switchToA)];
UIBarButtonItem *b2 = [[UIBarButtonItem alloc] initWithTitle:@"WorkSpace B"
                                                       style:UIBarButtonItemStyleBordered
                                                      target:self
                                                      action:@selector(switchToB)];
UIBarButtonItem *b3 = [[UIBarButtonItem alloc] initWithTitle:@"WorkSpace C"
                                                       style:UIBarButtonItemStyleBordered
                                                      target:self
                                                      action:@selector(switchToC)];
----

So, we've created a flexible invisible item and 3 buttosn. Each button is named for one of the workspaces and is given an action that will trigger switching. 

NOTE: See how the action is specified as `@selector(...)`? This is the standard way of dynamically passing a method as code. Here is a good link for learning about  link:https://developer.apple.com/library/ios/#documentation/General/Conceptual/DevPedia-CocoaCore/Selector.html[`@selector` and `SEL`] 

Next, we're going to add all these elements to the toolbar. Even though we have created only 1 `flexible` object, we can use it twice. Add all the elements to the toolbar, then add the toolbar to the canvas like so:

[source]
----
[toolBar setItems:@[flexible, b1, b2, b3, flexible]];

[self.canvas addSubview:toolBar];
----

Switching Views
---------------
Even though this is still part of the `C4WorkSpace`, I've made this part of the tutorial its own section because we're doing some interesting things that need more explanation. Now that we've created out buttons and assigned some actions, it's time to actually build the methods that we're referring to. 

We're going to construct a single `switchToView:transitionOptions:` method that handles the actual switching of views. Then, we'll create 3 methods that use this method in different ways. The 3 methods will be those that are triggered by the buttons in our toolbar.

The ACTUAL Switch
~~~~~~~~~~~~~~~~~
Let's start by constructing the actual switch. Add the following method to your class:

[source]
----
-(void)switchToView:(C4View *)view transitionOptions:(UIViewAnimationOptions)options {
    //...
}
----

This method is going to take a single `C4View` and a set of `UIViewAnimationOptions` as arguments. We're using this strange-looking options type to specify _how we want our views to switch_. This is the raw way of specifying how we want our animations to look.

Let's keep moving... 

We want to make sure that we're not switching between the same view. That means that we don't want to trigger animations or run any code in the following cases: 

- `WorkSpaceA` is visible and we hit the `WorkSpaceA` button
- `WorkSpaceB` is visible and we hit the `WorkSpaceB` button
- `WorkSpaceC` is visible and we hit the `WorkSpaceC` button

Pretty straightforward right? Add the following `if` statement to your method:

[source]
----
if(![currentView isEqual:view]) {
    //...
}
----

This statement will prevent anything from happening if the current view is visible and we touch the current view's button.

Now we're going to get our hands dirty with `UIView` animations and blocks. Add the following to the inside of that `if` statement:

[source]
----
[UIView transitionFromView:currentView
                    toView:view
                  duration:0.75f
                   options:options
                completion:^(BOOL finished) {
    currentView = view;
    finished = YES;
}];
----

There is this neat `transitionFromView:toView:` method in the `UIView` class. We use it and pass it 5 things:

- A view to switch *from*
- A view to switch *to*
- A duration for the animation
- A set of animation options
- A *block* of code to execute for the animation

NOTE: The `block` part of this might seem a bit strange to you so I'll try to briefly explain it... Blocks are methods that can be passed around like objects and variables. In the same way as you use a * to mark an object (e.g. C4View *v;) you use a ^ to mark a block. In a `UIView` animation, all the code that is inside the `block` will be executed in the animation that you're creating.

The Switch Methods
~~~~~~~~~~~~~~~~~~
There are 3 switch methods that create animation options and then apply them to the transition from the current view to that of whichever button was pressed. 

For switching to `WorkSpaceA`, add the following method to your workspace:

[source]
----
-(void)switchToA {
    UIViewAnimationOptions options = UIViewAnimationOptionTransitionFlipFromLeft;
    [self switchToView:(C4View*)workspaceA.canvas transitionOptions:options];
}
----

This specifies that when we switch to `WorkSpaceA` we're going to see the view *flip in from the left*. 
 
For switching to `WorkSpaceB`, add the following method to your workspace:

[source]
----
-(void)switchToB {
    UIViewAnimationOptions options = UIViewAnimationOptionTransitionCurlDown;
    [self switchToView:(C4View*)workspaceB.canvas transitionOptions:options];
}
----

This specifies that when we switch to `WorkSpaceB` we're going to see the view *curl down from the top*. 

For switching to `WorkSpaceC`, add the following method to your workspace:

[source]
----
-(void)switchToC {
    UIViewAnimationOptions options = UIViewAnimationOptionTransitionCrossDissolve;
    [self switchToView:(C4View*)workspaceC.canvas transitionOptions:options];
}
----

This specifies that when we switch to `WorkSpaceB` we're going to see the view *cross dissolve*.

Now run it and go and click all the buttons and canvases.

C'est Tout.

Wrapping Things Up
------------------
We just worked through an advanced tutorial that uses subclasses of `C4CanvasController` to create an application that has multiple workspaces and canvases. We added 3 workspaces to our app and switched between them using `UIView` transition animations. The control of the application used buttons nested (and centered) in a `UIToolBar` object. Finally, we had 2 canvases with interactive elements on them, and a third canvas that had smaller versions of the first two inside of it.

I wanted to say something witty about too many canvases, but when I searched for images to use in my wit-making, I only found these: link:multiCanvas/tooManyCanvases1.jpg[image], link:multiCanvas/tooManyCanvases2.jpg[image], and link:multiCanvas/tooManyCanvases3.jpeg[image]... 

I'm speechless.
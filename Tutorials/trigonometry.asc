Trigonometry
============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5348431

In this tutorial I'll take you link:trigonometry/stepbystep.jpeg[step by step] through the process of making a dynamic graph of a polygon in a circle. This app also updates various points of intersection between the shapes in the graph.

image::trigonometry/trigonometry.png["A Dynamic Graph"]

Variables
---------
We're going to need a lot of variables to make this thing happen, but we'll explain things as we go along. For now, you can copy all the following variables into the class implementation section of your workspace:

[source]
----
@implementation C4WorkSpace {
    CGPoint A, B, C, D, M, P, Q, X, Y;
    CGFloat radius, theta, dX, dY, s, slope, b, thetaA, thetaB;
    C4Shape *circle, *poly, *mPt, *pPt, *qPt, *xPt, *yPt, *angleB, *angleD, *linePQ;
    C4Label *lblA, *lblB, *lblC, *lblD, *lblM, *lblP, *lblQ, *lblX, *lblY;
}
----

Circle and Polygon
------------------
The first thing we want to do is set up a circle and a polygon, making sure that the polygon fits so that each corner touches the edge of the circle.

Circle
~~~~~~
Setting up the circle is the easiest part of this whole tutorial.

Create a method called `-(void)setupCircleAndPoly {}`, it is in this method that we'll create the circle and poly, adjust the position of the poly to fit the circle, and then add the poly to the circle (yup! as a subview of the circle).

[source]
----
-(void)createCircleAndPoly {
    //magic happens here.
}
----

Create a circle and give it some visual styling so that we can later reference this style for all other objects that we will add to the canvas.

[source]
----
circle = [C4Shape ellipse:CGRectMake(0,0,368,368)];
circle.lineWidth = 2.0f;
circle.strokeColor = C4GREY;
circle.fillColor = [UIColor clearColor];
----

Polygon
~~~~~~~
To create the polygon we need to specify the locations of 4 points that will make up the corners of the shape. There are some conditions we can start out by assuming that we want:

. the top corners to start above the mid-point of the circle
. the bottom corners to start below the mid-point of the circle
. the shape to be symmetric

We start by specifying two angles `thetaA` and `thetaB` for which we will specify values between `0` and `2.0` (i.e. we can later multiply these values by `PI` to get a range between `0` and `TWO_PI`).

We already specified the points `{A,B,C,D}` as class variables. The following polar-coordinate math will give us 4 values for points that will make up a symmetric polygon. The math is essentially:

[source]
----
x = r * sin(angle);
y = r * cos(angle);
----

Here's the implementation:

[source]
----
thetaA = 1.15f;
thetaB = 0.3f;

radius = circle.width / 2.0f;
theta = PI * thetaA;
A = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);

theta = PI * thetaB;
B = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);

theta = PI * (2.0f-thetaA);
C = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);

theta = PI * (2.0f-thetaB);
D = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);
----

Now we can create the polygon shape:

[source]
----
CGPoint polypts[4] = {A,B,C,D};
poly = [C4Shape polygon:polypts pointCount:4];
poly.style = circle.style; //using the circle's style
poly.lineJoin = JOINBEVEL;
[poly closeShape];
----

Positioning the Polygon
~~~~~~~~~~~~~~~~~~~~~~~
This is actually a tricky bit to accomplish. What we want to do is make sure that the polygon is positioned inside the circle so that all of its corners touch the circle.

I tried first positioning the shape by saying:

[source]
----
poly.center = CGPointMake(circle.width/2.0f,circle.height/2.0f);
----

...but this didn't work because the `frame` of the polygon is not the same as that of the circle. 

image::trigonometry/trigonometryBadAlignment.png["A Dynamic Graph"]

After a bit of hacking I figured out that I could do the translation like this:

. pick a point from `{A,B,C,D}`
. normalize the position of the point so that ranges from `0` to `1`
. set the `anchorPoint` of the polygon to the normalized point
. center the polygon based on the center of the circle added to the point we pick

This is how I did those steps: 

[source]
----
CGPoint polyAnchor = A;
polyAnchor.x = [C4Math map:polyAnchor.x
                   fromMin:poly.origin.x
                       max:poly.origin.x+poly.width
                     toMin:0 max:1];
polyAnchor.y = [C4Math map:polyAnchor.y
                   fromMin:poly.origin.y
                       max:poly.origin.y+poly.height
                     toMin:0 max:1];
poly.anchorPoint = polyAnchor;
poly.center = CGPointMake(circle.center.x+A.x,circle.center.x+A.y);
----

After centering the shape properly, you can now add it directly to the circle, then add the circle to the canvas.

[source]
----
[circle addShape:poly];
[self.canvas addShape:circle];
circle.center = self.canvas.center;
----

Setup and Run
~~~~~~~~~~~~~
Now you can call the `createCircleAndPoly` method from `setup`.

[source]
----
-(void)setup {
    [self setupCircleAndPoly];
}
----

Running the application now will give you the following:

image::trigonometry/trigonometryAligned.png["Aligned Poly in Circle"]


The next step is to start figuring out the points for the line.

Point: X
--------
We want to draw a line that has the following characteristics:

. passes through the mid-point of the segment `AD`
. passes through the intersection of the segments `AB` and `CD`

So... How do we accomplish this? We start out by finding the easiest point.

Create X
~~~~~~~~
Just like we did with the style of the poly (i.e. copying the style of the circle), we're going to build a point shape and use this as the basis for styling all other points in our diagram.

[source]
----
xPt = [C4Shape ellipse:CGRectMake(0, 0, 7, 7)];
xPt.lineWidth = 2.0f;
xPt.strokeColor = C4GREY;
xPt.fillColor = C4RED;
----

After putting this code in `setup`, create a new method called `setX`. We'll do our calculations for the x-coordinate in this method.

Calculate X
~~~~~~~~~~~
The x-point is simply the middle of A and D. You can calculate it's position quite simply by doing the following:

[source]
----
-(void)setX {
    //X is the mid-point of AD
    X = CGPointMake((D.x + A.x)/2.0f,(D.y+A.y)/2.0f);
    xPt.center = X;
}
----

image::trigonometry/trigonometryX.png["The X Point"]

Point: M
--------
The next point to calculate is `M` because of a few reasons. First, we know all the things we need to calculate it... That is, we have 2 defined lines `AB` and `CD`. Second, we don't actually have enough information yet to calculate `Y`... We need `M` in order to figure out `Y`.

Create M
~~~~~~~~
This step is dead-easy. The following will duplicate `xPt`, we don't even need to copy styles.

[source]
----
mPt = [xPt copy];
----

Calculate M
~~~~~~~~~~~
Finding the intersection between two lines seems pretty trivial. However, I had never done it before (especially in code) so I had to start looking for theory.

I checked a few places and found great explanations from link:http://en.wikipedia.org/wiki/Line-line_intersection[Wikipedia] and link:http://mathworld.wolfram.com/Line-LineIntersection.html[Wolfram]. What I found, though, didn't totally help me because the "explanations" looked like this:

image::trigonometry/trigonometryLineLineMath.png["Line-Line Intersection Math"]

So, I started looking for answers that included code. The link:http://wiki.processing.org/w/Line-Line_intersection[Processing] wiki had a good write up, and so did link:http://stackoverflow.com/questions/4543506/algorithm-for-intersection-of-2-lines[StackOverflow]. The accepted answer on S.O was pretty straightforward and using all the other references I built up the following set of code that isolates `M` precisely.

[source]
----
-(void)setM {
    //M is the intersection of the two internal lines of the polygon
    CGFloat a1 = B.y - A.y;
    CGFloat b1 = A.x - B.x;
    CGFloat c1 = a1*A.x + b1*A.y;
    
    CGFloat a2 = D.y - C.y;
    CGFloat b2 = C.x - D.x;
    CGFloat c2 = a2*C.x + b2*C.y;
    
    CGFloat det = a1*b2 - a2 * b1;
    M = CGPointMake((b2*c1 - b1*c2)/det, (a1*c2 - a2*c1)/det);
    mPt.center = M;
}
----

image::trigonometry/trigonometryXM.png["X and M Points"]

NOTE: This did take me a while to get right.

Point: Y
--------
With `X` and `M` defined I could now start figuring out the coordinate for the `Y` point. I hacked around for a while, and after trying a couple of different approaches I realized that I should be using the link:http://en.wikipedia.org/wiki/Law_of_sines[Law of Sines]. This was a good throwback to high-school math that I'd forgotten!

image::trigonometry/trigonometryLawOfSines.png["Math for the Law of Sines"]

Create Y
~~~~~~~~
Again, just copy the previous point.

[source]
----
yPt = [mPt copy];
----

Calculate Y
~~~~~~~~~~~
To calculate `Y` we first need to solve for 3 angles, two of which we'll use `C4Vector` to do the calculation for us.

To make things a bit cleaner and easier, I suggest writing the following method:

[source]
----
-(CGFloat)angleFromA:(CGPoint)pt1 b:(CGPoint)pt2 c:(CGPoint)pt3 {
    pt1.x -= pt2.x;
    pt1.y -= pt2.y;
    pt3.x -= pt2.x;
    pt3.y -= pt2.y;
    
    return [C4Vector angleBetweenA:pt1 andB:pt3];
}
----

What this does is take 2 points, displaced by an intermediate point so that we can get the angle between `pt1` and `pt2` based on `{0,0}`.

We're interested in the triangle that is defined by the points: `C`, `M` and `Y`, and we already have enough information to get the angles for `MCB` and `CMY`.

Now, create a `setY` method and start out by calculating the angles for `MCB` and `CMY`.

[source]
----
-(void)setY {
	CGFloat angleMCB = [self angleFromA:M b:C c:B];
	CGFloat angleCMY = [self angleFromA:X b:M c:D]; //because they're equal
	//...
}
----

NOTE: We use the angle `XMD` to calculate for two reasons: 1) because we don't `Y` yet, 2) because the `XMD` and `CMY` angles are equal to one another (i.e. the diagram is symmetric)

From here, calculating the angle `CYM` is easy:

[source]
----
CGFloat angleCYM = PI - angleMCB - angleCMY;
----

Now that we know 3 angles, we should calculate the length of the sides `CM`:

[source]
----
CGFloat dCM = [C4Vector distanceBetweenA:C andB:M];
----

With this we can now calculate the length of the side `MY`:

[source]
----
CGFloat dMY = dCM/[C4Math sin:angleCYM] * [C4Math sin:angleMCB];
----

NOTE: this is actually a coded version of `b = a/sin(A) * sin(B)`

At this point I started messing around with different equations and tricks, and again like before, wasted a bunch of time until I realized that calculating the position of `Y` was really easy if I just extended the line from `X` to `M`. 

Calculate the distance between `X` and `M`:

[source]
----
CGFloat dMX = [C4Vector distanceBetweenA:M andB:X];
----

Now, the distance from `X` to `Y` is going to be `dMX` + `dMY`, and since we already know both of these we can add them up and divide them by `dMX` to get a multiplier that will extend `MX` to `XY`.

[source]
----
CGFloat multiplier = (dMX + dMY)/dMX;
----

From here, calculating `Y` is a cinch:

[source]
----
Y = CGPointMake(X.x + dX * multiplier, X.y + dY * multiplier);
yPt.center = Y;
----

And we get a new point at Y...

image::trigonometry/trigonometryXMY.png["X, M and Y Points"]

Points: P, Q
------------
Ok, finally we're getting somewhere. The last step is to check for the intersections of the line `XY` with the edges of the circle. Straightforward? NO! (well... maybe now, but definitely not when I started).

Create P and Q
~~~~~~~~~~~~~~
Easy.

[source]
----
pPt = [yPt copy];
qPt = [pPt copy];
----

Calculate P and Q
~~~~~~~~~~~~~~~~~
So, I went back to my searches for how to do this and like the first time I ended up finding a good description at link:http://mathworld.wolfram.com/Circle-LineIntersection.html[Wolfram]. I found the following:

image::trigonometry/trigonometryLineCircleMath.png["Math for Line-Circle Intersection"]

This time, however, I was used to taking equations and turning them into code. I knew I had to first solve for 4 variables: `dX`, `dY`, `dr` and `D` (which I call `bigD` in code). I also needed the slope of the line and its displacement (i.e. from `y = mx + b`). Create a `setPQ` method:

[source]
----
-(void)setPQ {
    slope = dY / dX;
    b = M.y;
}
----

NOTE: we already set `dX` and `dY` in our `setY` method, so we can just mosey along here.

[source]
----
CGFloat dr = [C4Math sqrt:(dX*dX+dY*dY)];
CGFloat bigD = X.x*M.y - M.x*X.y;
----

We're now going to calculate the position for `P` using the + sign of `y`. Since we don't know what the first sign will be (i.e. positive or negative) we calculate it:

[source]
----
CGFloat sgn = dY / [C4Math absf:dY];
x = (bigD*dY+sgn*dX*[C4Math sqrt:radius*radius*dr*dr-bigD*bigD])/(dr*dr);
y = slope*x + b;
P = CGPointMake(x, y);
----

...and now we calculate `Q` for the - sign of `y`

[source]
----
x = (bigD*dY-sgn*dX*[C4Math sqrt:radius*radius*dr*dr-bigD*bigD])/(dr*dr);
y = slope*x + b;
Q = CGPointMake(x, y);
----

Now, a neat little trick we have to do to keep P and Q in their proper positions is to invert them if the slope of the line `PQ` is less than `0`:

[source]
----
if(slope > 0) {
    CGPoint temp = P;
    P = Q;
    Q = temp;
}

pPt.center = P;
qPt.center = Q;
----

Our diagram should now have all 5 points on it!

image::trigonometry/trigonometryXMYPQ.png["X,M,Y,P and Q points"]

The Line
--------
Adding the line is a cinch:

[source]
----
CGPoint linePts[2] = {P,Q};
linePQ = [C4Shape line:linePts];
linePQ.style = circle.style;
----

Pretty easy right? Now we have:

image::trigonometry/trigonometryLine.png["Graph with a line"]

Angles!
-------
For a little style, we're going to put two angle diagrams in the bottom points of the polygon. To do this we're going to add _circles_ to the diagram, but only adjust their `strokeStart` and `strokeEnd` points so that they "look" like arcs.

Create B and D
~~~~~~~~~~~~~~
To create the angle shapes for `B` and `D` you can do the following in `setup`:

[source]
----
angleD = [C4Shape ellipse:CGRectMake(0, 0, 80, 80)];
angleD.style = circle.style;
angleB = [angleD copy];
----

Calculate B and D
~~~~~~~~~~~~~~~~~
Next, create a `setAngleBD` method and calculate the angle `ADC`:

[source]
----
-(void)setAngleBD {
    theta = [self angleFromA:A b:D c:C];
 	//...
}
----

Now that we know the value of the angle, we have to simply calculate the angle _to_ the beginning of the curve so that we can properly set the `strokeStart` and `strokeEnd` values for each shape. 

Wait. Let's put a little style into this!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ok, so after I first created this little demo I realized that I had hard-coded the size of the angle shapes. This ended up being a visual bug where the shape would extend out of the polygon if the polygon was really really thin.

image::trigonometry/trigonometryVisualBug.png["A Visual Bug"]

So, how do we fix this? We change the size of the shape every time we adjust the polygon, making the size of the angle shape a fraction of the length of the side `AD`. To do this efficiently, we're going to remove the angle shapes from the polygon and recreate them.

[source]
----
[angleD removeFromSuperview];
angleD = nil;

[angleB removeFromSuperview];
angleB = nil;

CGFloat dAD = [C4Vector distanceBetweenA:A andB:D];
CGFloat r = [C4Math maxOfA:80 B:10.0f];

angleD = [C4Shape ellipse:CGRectMake(0, 0, r, r)];
angleD.style = circle.style;
angleD.center = D;

angleB = [angleD copy];
angleB.center = B;
----

NOTE: Your devices will be able to handle this remove and rebuild very efficiently, so don't worry about it.

The next thing we're going to do to these angles is to calculate the angles of rotations to set the `strokeStart` and `strokeEnd`.

[source]
----
CGFloat rot = [self angleFromA:C b:D c:B];
angleD.strokeStart = 1 - theta/TWO_PI - rot/TWO_PI;
angleD.strokeEnd = angleD.strokeStart + theta/TWO_PI;

angleB.strokeStart =  rot/TWO_PI + 0.5f;
angleB.strokeEnd = angleB.strokeStart + theta/TWO_PI;
----

Okay, once we add these angles to the polygon we have:

image::trigonometry/trigonometryAngles.png["Graph with angles"]

Labels
------
Finally, we're going to add labels to the diagram. It's pretty easy because we know all the points. 

Create Labels
~~~~~~~~~~~~~
Create a method like this:

[source]
----
-(void)createLabels {
    lblA = [C4Label labelWithText:@"A" font:[C4Font fontWithName:@"TimesNewRomanPS-ItalicMT" size:16.0f]];
    lblB = [C4Label labelWithText:@"B" font:lblA.font];
    lblC = [C4Label labelWithText:@"C" font:lblA.font];
    lblD = [C4Label labelWithText:@"D" font:lblA.font];
    lblP = [C4Label labelWithText:@"P" font:lblA.font];
    lblQ = [C4Label labelWithText:@"Q" font:lblA.font];
    lblM = [C4Label labelWithText:@"M" font:lblA.font];
    lblX = [C4Label labelWithText:@"X" font:lblA.font];
    lblY = [C4Label labelWithText:@"Y" font:lblA.font];
}
----

Position Labels
~~~~~~~~~~~~~~~
Positioning the labels is pretty easy. Create a method like this:

[source]
----
-(void)setLabelPositions {
    lblA.center = CGPointMake(A.x - 6.0f,  A.y - 8.0f);
    lblB.center = CGPointMake(B.x + 5.0f,  B.y + 8.0f);    
    lblC.center = CGPointMake(C.x + 6.0f,  C.y - 8.0f);    
    lblD.center = CGPointMake(D.x - 6.0f,  D.y + 8.0f);    
    lblP.center = CGPointMake(P.x - 16.0f, P.y + 4.0f);    
    lblQ.center = CGPointMake(Q.x + 14.0f, Q.y - 4.0f);    
    lblM.center = CGPointMake(M.x - 1.0f,  M.y -16.0f);    
    lblX.center = CGPointMake(X.x - 10.0f, X.y -8.0f);    
    lblY.center = CGPointMake(Y.x + 12.0f, Y.y +8.0f);
}
----

NOTE: We add a couple of points here and there to offset the labels so that they don't interfere with the diagram... I did this by hand, trial and error.

AAAAAAAAAND we have our diagram...

image::trigonometry/trigonometry.png["A Dynamic Graph"]

Keeping Things Tidy
-------------------
To keep things tidy, and to help with simplifying the next few steps, I created a couple of methods that consolidate the addition of shapes to our diagram. I created the following three methods:

[source]
----
-(void)addShapesToPoly {
    CGPoint linePts[2] = {P,Q};
    linePQ = [C4Shape line:linePts];
    linePQ.style = circle.style;
    
    [poly addObjects:@[angleB,angleD]];
    [poly addObjects:@[linePQ,mPt,xPt,yPt,pPt,qPt]];
}

-(void)addLabelsToPoly {
    [poly addObjects:@[lblA, lblB, lblC, lblD, lblM, lblP, lblQ, lblX, lblY]];
}
----

INTERACTION!
------------
I wasn't happy with just having a static image, so I decided to put 3 levels of interaction on this diagram. You can:

- adjust `A` and `C` by _dragging_ back and forth across the top (1 finger)
- adjust `B` and `D` by _dragging_ back and forth across the bottom (1 finger)
- rotate the diagram by _dragging_ back and forth anywhere (2 fingers)

To do this we add 2 gestures to the canvas and modify them in the following way:

[source]
----
[self addGesture:PAN name:@"adjust" action:@"adjust:"];
[self maximumNumberOfTouches:1 forGesture:@"adjust"];

[self addGesture:PAN name:@"rotate" action:@"rotate:"];
[self minimumNumberOfTouches:2 forGesture:@"rotate"];
----

adjust:
~~~~~~~
The adjust method handles the changing of points and updating the diagram. The method is quite simple:

[source]
----
-(void)adjust:(UIPanGestureRecognizer *)gesture {
    CGPoint p = [gesture locationInView:self.canvas];
    CGFloat rot = (p.x / self.canvas.width)/2.0f;

    if(p.y < self.canvas.center.y) [self setThetaA:rot+1 thetaB:thetaB];
    else [self setThetaA:thetaA thetaB:rot];
}
----

image::trigonometry/trigonometryAdjust.png["Adjusted top and bottom points"]

...it's simple because it calls the following method:

[source]
----
-(void)setThetaA:(CGFloat)_thetaA thetaB:(CGFloat)_thetaB {
    thetaA = _thetaA;
    thetaB = _thetaB;
    
    [poly removeFromSuperview];
    
    radius = circle.width / 2.0f;
    theta = PI * thetaA;
    A = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);
    
    theta = PI * thetaB;
    B = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);
    
    theta = PI * (2.0f-thetaA);
    C = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);
    
    theta = PI * (2.0f-thetaB);
    D = CGPointMake(radius*[C4Math sin:theta], radius*[C4Math cos:theta]);
    
    CGPoint polypts[4] = {A,B,C,D};
    
    poly = [C4Shape polygon:polypts pointCount:4];
    poly.style = circle.style;
    poly.lineJoin = JOINBEVEL;
    
    CGPoint polyAnchor = A;
    polyAnchor.x = [C4Math map:polyAnchor.x fromMin:poly.origin.x max:poly.origin.x+poly.width toMin:0 max:1];
    polyAnchor.y = [C4Math map:polyAnchor.y fromMin:poly.origin.y max:poly.origin.y+poly.height toMin:0 max:1];
    poly.anchorPoint = polyAnchor;
    
    poly.center = CGPointMake(circle.width/2.0f+A.x,circle.height/2.0f+A.y);
    [poly closeShape];

    [circle addShape:poly];
    [self.canvas addShape:circle];
    circle.center = self.canvas.center;
    
    [self setX];
    [self setM];
    [self setY];
    [self setPQ];
    [self setAngleBD];
    [self setLabelPositions];
    [self addShapesToPoly];
    [self setLabelPositions];
    [self addLabelsToPoly];
}
----

There's nothing new in the `setThetaA:thetaB:` method, just a copy and paste job without creating shapes.

NOTE: This method may _look_ long, but really the device handles it very very very fast.

rotate:
~~~~~~~
Compared to the `adjust:` method this one is a cinch. Since we added all the points, lines and labels to the polygon, and we added the polygon to the circle, all we have to do is rotate the circle.

[source]
----
-(void)rotate:(UIPanGestureRecognizer *)gesture {
    CGPoint p = [gesture translationInView:self.canvas];
    p.x *= TWO_PI/self.canvas.width;

    circle.rotation += p.x;
    [gesture setTranslation:CGPointZero inView:self.canvas];

    lblA.rotation = -circle.rotation;
    lblB.rotation = -circle.rotation;
    lblC.rotation = -circle.rotation;
    lblD.rotation = -circle.rotation;
    lblM.rotation = -circle.rotation;
    lblP.rotation = -circle.rotation;
    lblQ.rotation = -circle.rotation;
    lblX.rotation = -circle.rotation;
    lblY.rotation = -circle.rotation;
}
----

...Oh yeah, we also have to update the rotation of the labels so that they remain upright and readable.

image::trigonometry/trigonometry.png["Rotated graph"]

Wrapping Things Up
------------------
This was a complex example showing many levels of geometry, trigonometry and other tricks for adding shapes to shapes and adjusting everything. Our app is dynamic, fast and uses gesture recognition to provide the interaction. It took me a long time to get this one running smoothly, and I spent as much time cleaning up the code afterwards so that it flows better and makes sense.

I hope the tutorial is clear, and concise and that by looking at the link:https://gist.github.com/C4Tutorials/5348431[code] that you've been able to easily follow along.

Until Later. 
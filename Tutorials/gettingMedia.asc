Getting Media
=============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5424012
:vimeo: 64684937

Two things: 1) Get Images from the Web 2) Get Movies from the Web. That's what we're doing here.

The URL of Media
----------------
It's just as easy to create visual objects from downloadable web media as it is to create them from files in your application. In this tutorial I'll show you how to grab data from the internet and turn that into an image. I'll also show you how to grab movies from the internet in 2 ways: 1) from your own source 2) from Vimeo.

The main thing we're going to do in each case is create these visual objects using URLs.

WARNING: You need to be connected to the internet for this tutorial (either on your device, or via your comp for the simulator).

Implement & Setup
-----------------
We've done this implementation and setup a lot, so let's blitz through it. Add the following to your application:

[source]
----
@implementation C4WorkSpace {
    C4Image *robotsImage;
    C4Movie *robotsMovie;
}

-(void)setup {
    self.canvas.backgroundColor = [UIColor blackColor];

    robotsImage = [self createRobotsImage];
    if(robotsImage != nil) [self.canvas addImage:robotsImage];

    robotsMovie = [self createRobotsMovie];
    if(robotsMovie != nil) [self.canvas addMovie:robotsMovie];
}
----

In a nutshell, what we're doing is creating 2 objects: an image and a movie. If the objects are created (i.e. they aren't `nil`) add them to the canvas. Easy.

What the `nil`?
~~~~~~~~~~~~~~~
When you create objects from URLs they might return `nil` for a couple of reasons:

. Your device might not be connected to the internet
. The URL might be wrong

If either of these cases happens, then the initializer methods return `nil` instead of giving you an object.

You need to check to make sure there's an actual object to add to the canvas before adding it, otherwise the app will crash.

TIP: Try editing the image and the movie urls to see what happens.

Grab An Image
-------------
To create a `C4Image` from a file on the web, we're going to pass in a web url as a string. Add the following method to your application:

[source]
----
-(C4Image *)createRobotsImage {
    NSString *robotsImageUrl = @"http://www.c4ios.com/tutorials/gettingMedia/robots.png";
    C4Image *imageFromURL = [C4Image imageWithURL:robotsImageUrl];
    imageFromURL.width = self.canvas.width;
    imageFromURL.center = self.canvas.center;
    
    return imageFromURL;
}
----

We try to create an image, we set its width and center properties. Then we return it. If it is `nil` we return it anyways.

The image we're downloading is actually `1600x1200` but still a pretty small file, so with a fast internet connection your device should be able to grab this data lickety-split.

NOTE: You can actually send messages to `nil` objects... It's a bit strange to think that if there's no movie that you can actually set its width and center... Nothing will happen though. Be carful of this, it slips me up sometimes when I'm looking for a bug and its seems like my code is normal but nothing is happening.

Grab A Movie
------------
To create a `C4Movie` from a file on the web, we're going to pass in a web url as a string. Add the following method to your application:

[source]
----
-(C4Movie *)createRobotsMovie {
    NSString *robotsURL = @"http://c4ios.com/tutorials/gettingMedia/robots.mp4";
    
    C4Movie *movieFromURL = [C4Movie movieWithURL:robotsURL];
    movieFromURL.zPosition = 200;
    movieFromURL.perspectiveDistance = 1000.0f;
    movieFromURL.alpha = 0.0f;
    movieFromURL.center = CGPointMake(self.canvas.center.x,self.canvas.center.y-10);
    movieFromURL.loops = YES;
    movieFromURL.shouldAutoplay = YES;
    [self runMethod:@"animate" afterDelay:0.5f];
 
    return movieFromURL;
}
----

Once we create the movie we position it so that it's above the image by some `zPosition` distance. We then give it perspective, set its alpha to zero, position it and tell it to repeat, tell it to play automatically, and then wait a half second before animating the movie

NOTE: You can actually play movies from Vimeo as well, so long as you links to actual video files and not just players.

Put An Animation On It
~~~~~~~~~~~~~~~~~~~~~~
Add a method that slowly rotates the movie:

[source]
----
-(void)animate {
    robotsMovie.animationDuration = 1.0f;
    robotsMovie.alpha = 1.0f;
    
    robotsMovie.animationOptions = REPEAT | LINEAR;
    robotsMovie.animationDuration = robotsMovie.duration;
    robotsMovie.rotationY += TWO_PI;
}
----

This method animates the movie's alpha from 0 to 1 for 1 second, and starts rotating it so that it does a full 360 through the entire length of the movie. Pretty straightforward. 

Wrapping Things Up
------------------
We created 2 different visual objects from media we downloaded from the web. We grabbed one video from a Vimeo link, and one from a private link.

Tuesday's coming, did you bring your coat?
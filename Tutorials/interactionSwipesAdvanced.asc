Advanced Swipe Gestures
=======================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5423123
:vimeo: 64685013

Swipe gestures are flexible little things. You can grab a bunch of different information from them. In this tutorial we're going to build an interactive app that read the number, direction and location of swipe gestures. It's going to then draw from the origin point of the swipe an arrows for each touch in the gesture. Finally, the direction and color of the arrows will be determined by the gesture's direction.

image::interactionSwipesAdvanced/interactionSwipesAdvanced.png["Advanced Swipe Gestures"]

The Problem
-----------
We want to build an application that reads gestures and draws arrows, seems straightforward but there's a couple of things to this tutorial that are tricky. 

- create an arrow
- create a dynamic set of arrows (depending on the gesture count)
- rotate and color the arrows depending on swipe direction
- fade them out

Create an Arrow
---------------
This is probably the easiest step (aside from the fading out) in the tutorial. We're going to build an arrow shape using `CGPath` and then save that shape as a variable we can come back to and copy when we need it. Add the following variable to your implementation:

[source]
----
@implementation C4WorkSpace {
    C4Shape *arrow;
}
----

Now, add to your project the following method that will create an arrow shape:

[source]
----
-(void)createArrow {
    CGMutablePathRef arrowPath = CGPathCreateMutable();
    CGPathMoveToPoint(arrowPath, nil, 0, 10);
    CGPathAddLineToPoint(arrowPath, nil, 192, 10);
    CGPathAddLineToPoint(arrowPath, nil, 187, 0);
    CGPathAddLineToPoint(arrowPath, nil, 222, 15);
    CGPathAddLineToPoint(arrowPath, nil, 187, 30);
    CGPathAddLineToPoint(arrowPath, nil, 192, 20);
    CGPathAddLineToPoint(arrowPath, nil, 0, 20);
    CGPathCloseSubpath(arrowPath);
    
    arrow = [C4Shape rect:CGRectMake(0, 0, 1, 1)];
    arrow.path = arrowPath;
    arrow.lineWidth = 0.0f;
}
----

This method creates a mutable path and then, point by point, draws an arrow shape. It then creates the arrow object as a basic rect, then swaps its path for the arrow we just created. That's it. 

Now, add the following to your setup:

[source]
----
-(void)setup {
    [self createArrow];
    //...
}
----

Check it Out
~~~~~~~~~~~~
The arrow you're creating looks like this:

image::interactionSwipesAdvanced/arrow.png["The Arrow Shape"]

But, if you'd like to see for yourself you can try adding the following to your canvas:

[source]
----
[self.canvas addShape:arrow];
arrow.center = self.canvas.center;
----

Create an Arrow Set
-------------------
The next step is to figure out how to create a dynamic set of arrows that is going to represent the direction and number of touches for each swipe. This step is going to need 3 things:

- the number of touches
- the direction of touches
- a color

Create and add to your project a method that takes all three of these things:

[source]
----
-(C4Shape *)createArrowSet:(NSInteger)touchCount
                  rotation:(CGFloat)rotation
                     color:(UIColor *)arrowColor {
    //...
}
----

This method will take all three arguments we need for constructing our set of arrows.

The arrowSet Shape
~~~~~~~~~~~~~~~~~~
We can create a shape that will hold all the arrows we need for the gesture we're receiving. But, to do so, we'll need to know how many arrows to fit in the shape. We're going to do this by first calculating a frame that adapts to the height of our arrow shape times the number of arrows, with a gap between each one.

[source]
----
CGFloat gap = 5.0f;
CGRect arrowSetFrame = CGRectMake(0, 0, arrow.width, arrow.height * touchCount + gap * (touchCount - 1));
C4Shape *arrowSet = [C4Shape rect:arrowSetFrame];
----

This creates a shape whose frame will enclose all the arrows we're going to add to the canvas. Next, let's just style the shape a little bit:

[source]
----
arrowSet.lineWidth = 0.0f;
arrowSet.fillColor = [UIColor clearColor];
arrowSet.userInteractionEnabled = NO;
----

We make sure that the main shape is invisible and that it (and its future subviews) have their interaction disabled. 

Add Arrows
~~~~~~~~~~
Now that we have a shape we can add arrows to it... We grab the number of touches and add that many arrows. Add the following `for` loop to the `createArrowSet` method:

[source]
----
for(int i = 0; i < touchCount; i++) {
    C4Shape *newArrow = [arrow copy];
    newArrow.origin = CGPointMake(0,arrow.height*i + gap * i);
    newArrow.fillColor = arrowColor;
    [arrowSet addShape:newArrow];
}
----

We create a copy of our original arrow, adjust its origin point to match its current number and then fill it with the current color for the gesture. We then add the shape to the arrow set.

Rotate The Set
~~~~~~~~~~~~~~
The `anchorPoint` is going to allow us to rotate easily around the center of the set of arrows. However, since we want to start the arrows at the start of the gesture, we set the `x` value of the anchor point to the `0`.

Add the following lines of code _after_ the `for` loop:

[source]
----
arrowSet.anchorPoint = CGPointMake(0,0.5f);
arrowSet.rotation = rotation;
----

When we update the `center` of the arrow set it will position itself with the arrows starting at the original touch point. This is also the point around which the arrows will rotate.

Return It
~~~~~~~~~
Finally, we need to return the set from our method. Finish off the method by adding:

[source]
----
return arrowSet;
----

The Swipe
---------
Now comes the nitty gritty. We're going to read the swipe gesture and build everything off of it... Create a method that receives a `UISwipeGestureRecognizer` like so:

[source]
----
-(void)swipe:(UISwipeGestureRecognizer *)swipeGesture {
   //fancy swipe stuff goes heres
}
----

What we're to do in this method is grab the 3 things we need for the `createArrowSet` method.

touchCount
~~~~~~~~~~
To get the number of touches used in the gesture, add the following to the `swipe:` method:

[source]
----
NSInteger touchCount = swipeGesture.numberOfTouches;
----

Rotation and Color
~~~~~~~~~~~~~~~~~~
To set the rotation and color for the arrow set we're going to need to dig into the swipe gesture, and we're going to use a switch statement to do all this. Add the following to the `swipe:` method:

[source]
----
CGFloat rotation;
UIColor *arrowColor;
switch (swipeGesture.direction) {
    case UISwipeGestureRecognizerDirectionUp:
        rotation = -HALF_PI;
        arrowColor = C4RED;
        break;
    case UISwipeGestureRecognizerDirectionLeft:
        rotation = PI;
        arrowColor = C4BLUE;
        break;
    case UISwipeGestureRecognizerDirectionDown:
        rotation = HALF_PI;
        arrowColor = [UIColor colorWithPatternImage:[C4Image imageNamed:@"lines"].UIImage];
        break;
    default:
        rotation = 0;
        arrowColor = C4GREY;
        break;
}
----

This creates a `rotation` value and an `arrowColor` object. Then we grab the direction of the gesture by calling `swipe.direction`. With this direction we can use a `switch` statement to determine the values of the rotation and color.

NOTE: Remember that the rotation of objects starts at 0 which is to the middle-right of the shape and increments in a clockwise fashion. So, when we want to rotate up we're actually rotating counter-clockwise by a `HALF_PI` rotation. For more on rotations check out link:http://stackoverflow.com/a/9611173/1218605[this answer].

Build The Arrows
~~~~~~~~~~~~~~~~
Now, with the 3 values we need we can add the following lines of code to our `swipe:` gesture so that the arrow set will get created, positioned and added to the canvas:

[source]
----
C4Shape *arrowSet = [self createArrowSet:touchCount rotation:rotation color:arrowColor];

CGPoint touchPoint = [swipeGesture locationInView:self.canvas];
arrowSet.center = touchPoint;

[self.canvas addShape:arrowSet];

[self runMethod:@"fadeOut:" withObject:arrowSet afterDelay:0.25f];
----

The `touchPoint` is the origin of the first touch in a gesture. We use this value (located in our canvas) to position the center of our arrow set (anchored to {0,0.5}). After adding the arrows to the canvas we trigger a method to start fading them out.

The Fade
--------
To get the arrow set to fade out (and automatically remove itself from the canvas) add the following method to your project:

[source]
----
-(void)fadeOut:(C4Shape *)shape {
    shape.animationDuration = 2.0f;
    shape.alpha = 0.0f;
    [shape runMethod:@"removeFromSuperview" afterDelay:shape.animationDuration];
}
----

TIP: Check out this link:interactionSwipesAdvanced/fade.jpg[fade]

The Gestures
------------
I've left this for last because it's a bit tricky. Our concept is to draw a bunch of arrows depending on how many touches are in a particular swipe gesture. However, swipe gestures can only register for one particular count of touches. This means that if you want to have your swipe gestures register for 1, 2, or 3 touches, you'll have to create gestures for each count.

How Many?
~~~~~~~~~
We want to register swipes for 1, 2, or 3 touches in _any_ direction. This means that we're going to have to create 12 distinct gestures. And, because each gesture requires its own name, we're going to have to set up a bit of a dynamic `for` loop for generating the gestures with unique names. Add the following to your `setup`:

[source]
----
for(int i = 1; i < 4; i++) {
    NSString *name;
    name = [NSString stringWithFormat:@"down%d",i];
    [self addGesture:SWIPEDOWN name:name action:@"swipe:"];
    [self numberOfTouchesRequired:i forGesture:name];
    name = [NSString stringWithFormat:@"left%d",i];
    [self addGesture:SWIPELEFT name:name action:@"swipe:"];
    [self numberOfTouchesRequired:i forGesture:name];
    name = [NSString stringWithFormat:@"up%d",i];
    [self addGesture:SWIPEUP name:name action:@"swipe:"];
    [self numberOfTouchesRequired:i forGesture:name];
    name = [NSString stringWithFormat:@"right%d",i];
    [self addGesture:SWIPERIGHT name:name action:@"swipe:"];
    [self numberOfTouchesRequired:i forGesture:name];
}
----

This will create gestures that are named like: `down1`, `down2`, `down3`. It also sets the number of touches for each one of those gestures.

Allow Multiple Touches
~~~~~~~~~~~~~~~~~~~~~~
Finally, you need to add the following to your `setup`:

[source]
----
self.canvas.multipleTouchEnabled = YES;
----

Wrapping Things Up
------------------
So, we really dug into the `SWIPE` gesture in this tutorial. We were able to grab a bunch of different components from the gesture and use those to dynamically create a set of arrows that are colored and rotated in the direction of the swipe. We also had to build 12 different gestures each with a unique name for each touch count and direction.

Ahoy.
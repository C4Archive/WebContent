Taking Snapshots
================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5399635
:vimeo: 64685220

It's time for a photoshoot. In this tutorial I'll show you how to access the cameras on your devices, switch between them and capture images so that you can play around with them.

Getting A Camera
----------------
There are two cameras on the devices you'll be building for, the front (which is on the same side of the screen) and the back. When you create a `C4Camera` it defaults to the front. Let's get one up and running.

[source]
----
-(void)setup {
    cam = [C4Camera cameraWithFrame:CGRectMake(0, 0, 240, 320)];
    [self.canvas addCamera:cam];
    [cam initCapture];
    //...
}
----

That's it. 3 lines of code in your `setup` will place a camera on the screen. You'll have a little frame up in the top-left of the canvas that will be capturing the view from the camera.

NOTE: You can make the frame of the anything you want, but the standard size is `4:3`, or `3:4` in portrait mode. When you have any other ratio for your frame, the camera will fill to the width of the frame and then clip anything outside of that.

Capture An Image
----------------
Capturing an image is quite easy, all you have to do is call the following method:

[source]
----
[cam captureImage];
----

Simple. 

Where's the Image?
~~~~~~~~~~~~~~~~~~
Doing something with the image is a little trickier actually. The reason for this is *time*. Let's say we set up some code that looks like this:

[source]
----
-(void)touchesBegan {
    [cam captureImage];
    C4Image *img = cam.capturedImage;
    //do something with img...
}
----

NOTHING WILL HAPPEN!!!

TIP: Don't add the code above to your project.

The reason for this is that the second line of code (i.e. `cam.capturedImage`) will often happen too soon. The camera takes some time to register the image it's capturing, convert it into the right format and create a `C4Image` that you can then access. It won't take long (a few hundredths of a second) but it will definitely take longer than the time it takes to run the next line of code (which is like milliseconds).

Instead, you have to *listen* for when the image is ready to be used. 

Here's How
~~~~~~~~~~
Let's use a tap gesture to get our camera taking snapshots, put the following after the `[self styleCamera];` in your setup:

[source]
----
[self addGesture:TAP name:@"capture" action:@"captureImage"];
[self numberOfTouchesRequired:1 forGesture:@"capture"];
----

We've set up a single tap gesture on the canvas that will trigger a method that will trigger `[cam captureImage]`. We make sure that the gesture will only take 1 tap to trigger, and no more because we're going to use another `TAP` gesture later.

Now, build the following method outside of `setup` so that the gesture will trigger it:

[source]
----
-(void)captureImage {
    [cam captureImage];
}
----

Easy. If you run the app now, and tap the canvas you'll hear the camera taking a snapshot. 

Grabbing the Image
~~~~~~~~~~~~~~~~~~
I mentioned earlier that you have to *listen* for when the image is ready and then go get it. Add the following to your project after the capture gesture.

[source]
----
[self listenFor:@"imageWasCaptured" fromObject:cam andRunMethod:@"putCapturedImageOnCanvas"];
----

What we do here, is listen for when the image is ready and then run a method that will do something with that image. Now, add the following method to your project outside of the `setup`:

[source]
----
-(void)putCapturedImageOnCanvas {
    C4Image *img = cam.capturedImage;
    img.width = 240.0f;
    img.center = CGPointMake(self.canvas.width * 2 / 3, self.canvas.center.y);
    [self.canvas addImage:img];
}
----

This method will grab the current captured image from the camera, resize it and add it to the canvas.

Switching Cameras
-----------------
Switching from the front to the back camera is a cinch. To do so, we're going to use the same trick as we did for capturing the image. That is, we're going to set up a gesture that will trigger the camera to switch positions. Add the following to your `setup`:

[source]
----
[self addGesture:TAP name:@"frontBack" action:@"switchFrontBack"];
[self numberOfTouchesRequired:2 forGesture:@"frontBack"];
----

This is the reason why we specified the number of taps for our `@"captureImage"` gesture, we have a second `TAP` gesture that now takes 2 touches to trigger. When it does, it runs the following method:

[source]
----
-(void)switchFrontBack {
    if(cam.cameraPosition == CAMERAFRONT || cam.cameraPosition == CAMERAUNSPECIFIED) {
        cam.cameraPosition = CAMERABACK;
    } else {
        cam.cameraPosition = CAMERAFRONT;
    }
}
----

This method basically states that if the camera position is in the front or unspecified, the position will switch to the back camera. When its in the back it will switch to the front.

Now, if you use a 2 finger tap on the canvas you'll see that the camera switches (it takes about a quarter second). 

Dolling Things Up
-----------------
At this point, I was getting close to happy with this tutorial but a couple of things were bothering me... First, the camera looks really flat. Second, you can't see any of the previous images because the new one always gets placed on top. Third, if I randomize the position of the images, the camera is actually placed _underneath_ all of them and gets easily covered. Fourth, flipping the camera looks bad... It just switches.

A Touch of Style
~~~~~~~~~~~~~~~~
To make the camera pop let's give it a little style. We don't _have_ to do this, but we're going to do it just to show that working with a `C4Camera` is the same as working with any other visual object in C4.

[source]
----
-(void)styleCamera {
    cam.center = CGPointMake(self.canvas.width / 3, self.canvas.center.y);
    cam.borderColor = C4GREY;
    cam.borderWidth = 1.0f;
    cam.shadowOpacity = 0.8f;
    cam.shadowOffset = CGSizeMake(5,5);
}
----

Oh, and don't forget to add the following right after the `[cam initCapture];` in your `setup`:

[source]
----
[self styleCamera];
----

//image here

Add Interaction
~~~~~~~~~~~~~~~
We're going to add a little bit of interaction to the images by making them draggable, and giving us the ability to take them off the canvas if they're not endearing. Add the following line of code to the `putCapturedImageOnCanvas` method:

[source]
----
[self addInteraction:img];
----

...And, then create the following method:

[source]
----
-(void)addInteraction:(C4Image *)img {
    [img addGesture:PAN name:@"move" action:@"move:"];
    [img addGesture:TAP name:@"remove" action:@"removeFromSuperview"];
    [img numberOfTapsRequired:2 forGesture:@"remove"];
}
----

This makes the image movable, and whenever you do a double-tap (i.e. two consecutive single-taps) the image will disappear. And, because you run this from the `putCapturedImageOnCanvas` method, all the images you put on the canvas will have this functionality.

//image

Oh, Right zPos
~~~~~~~~~~~~~~
If you just tried moving any of the images you'll have noticed that they cover the camera. Add the following to the `styleCamera` method:

[source]
----
cam.zPosition = 5000;
----

This makes sure that you'll have to take at least 5000 images before one of them will be on top of the camera. Heavy-handed but effective.

A Pretty Flip
~~~~~~~~~~~~~
If you add the following code to your `switchFrontBack` method, and place it *before* the `if` statement, your camera will do a pretty flip as it switches:

[source]
----
cam.animationDuration = 1.0f;
cam.perspectiveDistance = 500.0f;
cam.rotationY += TWO_PI;
----

Wrapping Things Up
------------------
This is a brief overview of how to work with `C4Camera`, for now it's probably all you'll need to get started. You might, later on, want to save some images to your Library or to your shared folder. But, this will be covered in another tutorial. For now, you know how to set up a camera, take a picture, switch camera devices and make everything look pretty and interactive.

Enjoi.
Advanced Panning
================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5423345
:vimeo: 64684733

We've seen how to link:/examples/interactionPanning.php[override the move:] method, now lets dig into one of the unique characteristics of the `PAN` gesture: translation.

Intro
-----
Each gesture – `PAN`, `TAP`, `SWIPE` – has a set of methods that will return information that's important for its type. In the case of panning, you'll generally want to know how far it has moved and sometimes even how quick the move has been. In this tutorial we're going to access the `translation` of the gesture to affect the properties of a shape.

A Simple Setup
~~~~~~~~~~~~~~
We're going to add a shape to the center of the canvas. After that, we're going to attach a gesture tot he canvas and have the qualities of the gesture affect the look of the shape.

Add the following setup to your projects:

[source]
----
@implementation C4WorkSpace {
    C4Shape *circle;
}
 
-(void)setup {
    circle = [C4Shape ellipse:CGRectMake(0, 0, 386, 386)];
    circle.userInteractionEnabled = NO;
    circle.center = self.canvas.center;
    [self.canvas addShape:circle];
    [self addGesture:PAN name:@"pan" action:@"modifyLineWidth:"];
}
----

How Much Drag?
--------------
The `PAN` gesture looks for dragging movements, the user must be pressing one or more fingers on a visual object (e.g. C4Control) while they pan it.  

A panning gesture is continuous. It begins (`UIGestureRecognizerStateBegan`) when the minimum number of fingers allowed (`minimumNumberOfTouches`) has moved enough to be considered a pan. It changes (`UIGestureRecognizerStateChanged`) when a finger moves while at least the minimum number of fingers are pressed down. It ends (`UIGestureRecognizerStateEnded`) when all fingers are lifted.

translationInView
~~~~~~~~~~~~~~~~~
When you want to know how far a drag gesture has moved you need to look at its `translationInView`. 

You can get the translation value like this:

[source]
----
CGPoint translation = [recognizer translationInView:view];
----

The value you're going to get back is the total difference between the current position and the initial position. Basically, this means that you can start a pan gesture and drag around the screen and whenever you get back to the original position of the gesture the `translationInView` will end up being {0,0}.

modifyLineWidth
~~~~~~~~~~~~~~~
Now that we know how grab the translation, let's use it for something. Add the following method to your project:

[source]
----
-(void)modifyLineWidth:(UIPanGestureRecognizer *)recognizer {
    CGPoint translation = [recognizer translationInView:self.canvas];
    
    CGFloat lineWidth = [C4Math absf:translation.x] + [C4Math absf:translation.y];
    circle.lineWidth = [C4Math constrainf:lineWidth min:5 max:150];

    [recognizer setTranslation:CGPointZero inView:self.canvas];
}
----

This grabs the current value of the translation then takes the value of both its `x` and `y` positions to calculate a new value for the `lineWidth` of the circle. It constrains the values of the `lineWidth` to anything between 5 and 150 points. 

Then, there's this `setTranslation:inView:` method. This method allows you to reset the value of the current translation. If you want to keep track only of the movement between calls to `translationInView:` then you can set the value of the translation to `CGPointZero`.

TIP: It's possible to always calculate the current translation against the original point but _if you don't need the translation for anything else_ I find it's easier to just set it to zero rather than keeping track and comparing things. 

Wrapping Things Up
------------------
This was a short but sweet little tutorial. One of the most useful tricks when working with gestures is being able to get the defining values out of each one. Have a look at the other interaction tutorials to see different ways of working with gestures.

Tchussi.
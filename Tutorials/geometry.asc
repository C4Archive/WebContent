Geometry
========
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com

Have you ever asked yourself "Where's the {0,0}?"... Maybe not. C4 adopts iOS geometry for adjusting things using geometric points and sizes. This tutorial will explain all the little details you need to know about geometry in C4.

image::geometry/geometryStructures.png["The three main geometric structures in C4"]

CGWhat?
-------
The way we're going to work with geometries in C4 is to access a few basic structures and methods from link:https://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html[CGGeometry]. All the structures we're going to use will start with the prefix *CG*, with the main structures being:

- CGPoint
- CGSize
- CGRect 

...That's it really, pretty simple. The data structure *CGPoint* represents a point in a two-dimensional coordinate system. The data structure *CGRect* represents the location and dimensions of a rectangle. The data structure *CGSize* represents the dimensions of width and height.

These structures provide the basic foundation for moving objects, resizing them, and so on. There are a few tweaks in C4 to make things easier, like the `movie.width` property, but for the most part you will be working with CGGeometry every time you create something. 

Making Points
~~~~~~~~~~~~~
Making a point is simple:

[source]
----
CGPoint p = CGPointZero;         // {0,0}
CGPoint p = CGPointMake(10,15);  //with numbers
CGPoint p = CGPointMake(x,y);    //with variables
----

Making Sizes
~~~~~~~~~~~~
Making a size is simple:

[source]
----
CGSize s = CGSizeZero;
CGSize s = CGSizeMake(10,15);
CGSize s = CGSizeMake(w,h);
----

Making Rects
~~~~~~~~~~~~
Making a rect is simple:

[source]
----
CGRect r = CGRectZero;
CGRect r = CGRectMake(10,10,100,100);
CGRect r = CGRectMake(x,y,w,h);
----

A rect is actually a structure with 2 different structures inside it: a point and a size.

Grabbing Values
~~~~~~~~~~~~~~~
You can grab values from any geometry structure very easily:

[source]
----
CGFloat x = point.x;
CGFloat y = point.y;
CGFloat w = size.width;
CGFloat h = size.height;
----

Grabbing values from a rect is also easy, you just have to specify the structure in the rect you're pinging:

[source]
----
CGFloat x = rect.origin.x;
CGFloat y = rect.origin.y;
CGFloat w = rect.size.width;
CGFloat h = rect.size.height;
----

CGWhy?!?!
---------
A great question is "Why can't I just say object.x = 5.0?"... "Why do I have to first create a point?" 

This was a big decision for me when I was creating C4. After a long time deciding whether to have x, y, w, and h properties on objects I decided in favour of using geometries. There were a two main reasons that sold me on this technique.

You're Learning iOS
~~~~~~~~~~~~~~~~~~~
I wanted C4 to be the kind of API that would springboard people into programming native iOS applications. Since Objective-C relies on CG it just made sense to have these geometry structures be one of the ties to get you into native programming. 

A Touch More...
~~~~~~~~~~~~~~~
In C4 you can position objects by their `origin` or their `center` points. This isn't usual in Objective-C programming, because you can only set the `center` of a UIView. We've added the option of setting the `origin` to all objects in C4. That said, this means that an object has 2 coordinate points to choose from.

If I was to create properties for x and y then we'd have something like:

[source]
----
obj.originX = ...;
obj.originY = ...;
obj.centerX = ...;
obj.centerY = ...;
----

...But, I found the following just a touch more elegant:

[source]
----
obj.origin = ...;
obj.center = ...;
----

Sealing the Deal
~~~~~~~~~~~~~~~~
At the very core of C4's animation framework, various kinds of properties are "animatable", with the `center` point of views being one of these things. When you change the center point a view moves automatically. It was important to keep consistent with the way that Core Animation worked, so keeping to CGPoints etc. was the way to go.

Coordinates
-----------
The coordinate system in C4 uses points _not pixels_. One of the reasons for this is the always changing screen resolutions of different devices. It's good to start thinking in terms of points because they will always be in the same place. If it helps, you can imagine that points are pixels but really what's going on is that on some displays as single point can be 2, 4 or more actual pixels.

Where's My {0,0}?
~~~~~~~~~~~~~~~~~
The zero-point for the canvas is in the *top-left* position. This zero-point is the same for all shapes, images, and any other visual object (more on this below). So, when you're positioning elements on the canvas you can always count x from the left hand side, and y from the top _no matter which orientation the device is in_.

Here's how I would position the center of a circle at the zero point:

[source]
----
-(void)setup {
	C4Shape *circle = [C4Shape ellipse:CGRectMake(0,0,40,40)];
	circle.fillColor = C4RED;
	circle.center = CGPointZero;
	[self.canvas addShape:circle];
}
----

image::geometry/geometryCircleCenteredZero.png["A Circle Centered at the Canvas Zero Point"]

NOTE: See how I used a `CGRectMake` to create the circle in the code above? This is a common way for creating views and objects in Objective-C.

Where's My {CEN,TER}?
~~~~~~~~~~~~~~~~~~~~~
All visual objects have a center point (even the canvas!). You can set and access them in the following way:

[source]
----
obj.center = ...;
----

image::geometry/geometryCenterSquare.png["A Centered Square"]

Here's how I would position the center of a square at the center of the canvas:

[source]
----
-(void)setup {
	C4Shape *square = [C4Shape rect:CGRectMake(0,0,192,192)];
	square.center = self.canvas.center;
	[self.canvas addShape:square];
}
----

Where's My {POI,NTS}?
~~~~~~~~~~~~~~~~~~~~~
The two basic points of an object are easy to grab, you just access the `center` and `origin` properties. So, if you wanted to highlight these two points on a square you could do the following:

[source]
----
c1.center = square.origin;
c2.center = square.center;
----

image::geometry/geometryCenterSquarePoints.png["A Centered Square with Highlighted Points"]

GITHUB: check out this link:https://gist.github.com/C4Tutorials/5350254[gist]

It's pretty easy to see those two points, but what about a circle? Circles don't have top-left corners! This is what it looks like if we replace the square with a circle:

image::geometry/geometryCenterCirclePoints.png["A Centered Circle with Highlighted Points"]

The "origin" of the circle seems to be floating up in the top-left above the shape. What's going on here?! 

Well, the thing is is that all objects (shapes, movies, text, etc.) are simply visual contents that sit inside of "hidden" views. In the following image I'm going to highlight the "frame" of the view so that the previous image makes sense.

image::geometry/geometryCenterCircleFrame.png["A Centered Circle with Highlighted Frame"]

The *origin* of any object is actually the top-left corner of the object's frame. The *center* of any object is the mid-x and mid-y coordinate of the object's frame.

NOTE: If you look closely you'll see that the stroke of the circle actually ends up slightly outside the frame. This happens because the stroke of a shape is drawn precisely on the outline of the shape with 1/2 of the `lineWidth` on the outside of the shape and 1/2 of the `lineWidth` on the inside of the shape.

Points v. Pixels
~~~~~~~~~~~~~~~~
Thinking about _points_ instead of pixels makes sense when you consider different devices, different hardware, different screen resolutions. On a screen of 320x480, 640x960, 1024x768, or 1136-by-640, the point {10,10} will always be the same distance from the top-left corner of the screen. The distance in _points_ will always be the same even though one screen might be 163ppi or 326ppi (i.e. meaning MORE pixels).

Anchoring Things Down
~~~~~~~~~~~~~~~~~~~~~
Every visual object has an `anchorPoint` property, which is the point around which all geometric manipulations to the object occur. For example, applying a rotation to an object with the default anchor point causes the object to rotate around its center. Changing the anchor point to a different location would cause the layer to rotate around that new point.

First, the `anchorPoint` is measured relative to the frame of the object with the `width` and `height` each being 1.0f. This means that the `center` of the the object is {0.5f,0.5f}.

After setting the `anchorPoint` to a new value, and then setting the center, you'll see that any changes to an object offset its visual content.


image::geometry/geometryAnchorPoint.png["A Centered Circle with Displaced Anchor Point"]

NOTE: See how the origin changes with the shape, but the center stays with the `anchorPoint`.

Here's an example showing two images, one with an offset `anchorPoint`.

[source]
----
img2.anchorPoint = CGPointMake(-1.0f,0.5f);

img1.center = self.canvas.center;
img2.center = self.canvas.center;
----

image::geometry/geometryAnchorPointImage.png["Two Images, One With An Offset anchorPoint"]

...and rotating these two images shows how transformations happen _around_ the `anchorPoint`.

[source]
----
img1.rotation = QUARTER_PI;
img2.rotation = QUARTER_PI;
----

image::geometry/geometryAnchorPointRotated.png["Two Images, Rotated"]

GITHUB: check out this link:https://gist.github.com/C4Tutorials/5356198[gist]

...Here's a fancy version of working with `anchorPoint` properties.

image::geometry/geometryAnchorPointHelix.png["Fancy"]

GITHUB: Check out this link:https://gist.github.com/C4Tutorials/5356352[gist]

Wrapping Things Up
------------------
We've had a brief look at basic geometry structures in C4, including how to make them, access their points and use them to position objects on the canvas. Using geometries (e.g. CGPoint) instead of simply setting things like `.x` and `.y` for visual objects is one of the big choices made in developing C4. Geometries are consistent with Objective-C programming and by learning how to do things this way you're actually getting one step closer to programming native iOS applications.

Ciao.
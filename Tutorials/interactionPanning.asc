Pan Gestures
============
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Tutorials/5423205
:vimeo: 64684697

In this tutorial I'll show you how to use `PAN` gestures to move objects and change states. We're going to build a dynamic label that moves and changes its text based on how many touches there are.

Intro
-----
Using the `move:` method for visual objects is pretty easy, all you do is the following:

[source]
----
[obj addGesture:@"PAN" name:@"pan" action:@"move:"];
----

But, did you know that it's pretty easy to override this and add some fancy customization? We're going to do that for the canvas to trigger the motion and changes for our label.

Create the Label
----------------
First things first, let's build a label and put it on the canvas. We need a class reference for the label, so add this to your workspace:

[source]
----
@implementation C4WorkSpace {
    C4Label *label;
}
----

Then, add the following method to set it up:

[source]
----
-(void)setupLabel {
    C4Font *font = [C4Font fontWithName:@"AvenirNextCondensed-Heavy" size:96];
    label = [C4Label labelWithText:@"I'm A Drag" font:font];
    label.center = self.canvas.center;
    label.userInteractionEnabled = NO;
    [self.canvas addLabel:label];
}
----

Pretty simple setup actually. It just constructs the label with a big font, centers it and adds it to the canvas. 

Setup
-----
As usual, we setup our workspace to do the things we want.

[source]
----
-(void)setup {
    [self setupLabel];
    
    self.canvas.multipleTouchEnabled = YES;
    [self addGesture:PAN name:@"pan" action:@"move:"];
}
----

Because we're working with multiple touches we need to tell the canvas to listen for them, so we set `multipleTouchEnabled` to `YES` and we're all good. If we didn't, we'd only ever register one touch at a time.

TIP: This is true for all visual objects!

Now, all we do is add the gesture to the canvas and we're done setting things up.

Maxium Override
---------------
How many of you are old enough to get this joke? Anyways, I am.

If you try to do anything with the canvas now nothing will happen! The reason is that we need to override the `move:` method for the canvas. Add the following to your project:

[source]
----
-(void)move:(UIPanGestureRecognizer *)recognizer {
    [label move:recognizer];
}
----

What happens now is that we pass the gesture to our label and trigger our label's `move:` method! So even though we're interacting with the canvas we can actually simulate interacting with the label.

The Beginning
~~~~~~~~~~~~~
I wanted to add a little flair to the beginning of the gesture so that the label picks up the number of touches being registered and changes its text content accordingly. 

You can do this by accessing the gesture's `numberOfTouches` property. Add the following to the `move:` method.

[source]
----
if(recognizer.state == UIGestureRecognizerStateBegan) {
    NSInteger touchCount = recognizer.numberOfTouches;
    label.text = [NSString stringWithFormat:@"%d Touch Pan", touchCount];
    [label sizeToFit];
}
----

Pretty straightforward! We grab the number of touches for the gesture when it starts and create a string. We then use the string to change the content of the label and update its text. 

TIP: Remember, the position of the label is constantly being updated by its `move:` method.

All Good Things
~~~~~~~~~~~~~~~
Our gesture must come to an end point. When it does we want it to move back to the center of the canvas, so we add a little bit of animation. Add the following _after_ the previous `if` statement you wrote:

[source]
----
 else if (recognizer.state == UIGestureRecognizerStateEnded) {
    label.animationDuration = 0.25f;
    label.text = @"I'm a Drag";
    [label sizeToFit];
    label.center = self.canvas.center;
}
----

This basically checks to see if the gesture ended and if so it creates an animation for the label to move back to the center of the canvas. It also resets its text.

Wrapping Things Up
------------------
This is a pretty short tutorial on how to override the `move:` method which is cooked into all visual objects. This is pretty handy because it means you can add customization depending on the state of the gesture recognizer.

Finito.

Interactive Curves
==================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   examples@c4ios.com
:code: https://gist.github.com/3172723
:vimeo: 48915613

This example shows how you can dynamically change the shape of a curve.

Nuts & Bolts
------------
This example has a lot of setup elements to it, for instance setting up 3 control point shapes as well as 2 curves and styling / positioning all of them. To see how this is done, check the linked code at the top of this page.

We will only show you the nuts and bolts of how to update a curve using a draggable object.

NOTE: After looking through this example make sure to read through the linked code at the top of this page, or better yet, run it from Xcode.

The Draggable Object
~~~~~~~~~~~~~~~~~~~~
In this example we use draggable ellipses as representations of the control points for our two curves. To make our ellipses draggable, we do the following: 

[source]
----
[controlA addGesture:PAN name:@"panGesture" action:@"move:"];
----

NOTE: There are 3 control objects `controlA`, `controlB` and `controlC`, the process is the same for each one so we'll only use `controlA` to show you how to make all this work.

Listen for Movement
~~~~~~~~~~~~~~~~~~~
The second trick to getting our curves to update when an ellipse moves is to have our canvas *listen* to each shape and run a specific method.  We do this in the following way:

[source]
----
[self listenFor:@"moved" fromObject:controlA andRunMethod:@"updateControlA"];
----

React with Methods
~~~~~~~~~~~~~~~~~~
When the canvas hears that a control has moved, it responds by running a specific method unique to each object. The method for the `controlA` object looks like the following:

[source]
----
-(void)updateControlA {
    bezierCurve.controlPointA = controlA.center;
}
----

.THAT'S IT!?!
[NOTE]
Yes. It's that simple. Every bezier and quadratic curve has a control point property (beziers have 2) that can be updated. The shape takes care of itself after that...
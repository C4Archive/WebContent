Timer: Multiple Timers
======================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   examples@c4ios.com
:code: https://gist.github.com/3251112
:vimeo: 48913862

This is an advanced example showing how you can give ID numbers to timers and actually have them pass themselves into a method.


A Special Method
----------------
Before we get started, we have to create a special method to accept a timer. What we're going to do is have each timer *pass itself into this method*.

To create a method that accepts a timer, do the following:

[source]
----
-(void)randomizeShape:(NSTimer *)currentTimer {
    //do stuff with the currentTimer
}
----

.Why an NSTimer here?
[NOTE]
Even though we're working with a C4Timer, it really is an NSTimer that does the job of firing on time and calling the methods we want. So, when the NSTimer fires it will pass _itself_ and not the C4Timer in which its encapsulated.

Two Timers
----------
We can create two different timers, one that starts automatically and one that starts 1 second after the first one.

UserInfo
~~~~~~~~
Every timer has a property called +userInfo+ to which you can assign an object. If you want to assign an ID number as the info for a timer you can pass it an +NSNumber+ object (not a CGFloat).

The First Timer
~~~~~~~~~~~~~~~
To create an automatic timer with an ID number you can do the following:

[source]
----
NSNumber *timerID = [NSNumber numberWithInt:0];
firstTimer = [C4Timer automaticTimerWithInterval:2.0f
                                          target:self
                                          method:@"randomizeShape:"
                                        userInfo:timerID
                                         repeats:YES];
----

.YES, your colon is important...
[NOTE]
You may have noticed that the method name in the code above has a +:+ at the end of it... This implies that the method will take an object. Since we know we're calling this method with a C4Timer, we know that the object being passed will be an NSTimer.

A Second Timer
~~~~~~~~~~~~~~
We will construct our second timer using a +fireDate+... Basically a number of seconds after which we want our timer to start firing. Also, because this is our second timer, we will update the timerID.

[source]
----
timerID = NSNumber numberWithInt:1];
secondTimer = [C4Timer timerWithFireDate:[NSDate dateWithTimeIntervalSinceNow:1.0f]
                                interval:2.0f
                                  target:self
                                  method:@"randomizeShape:"
                                userInfo:timerID
                                 repeats:YES];
----

Summary
-------
Ok, so what we did here in a nutshell is...
. We created a method that accepts a timer as its object
. We created an +automatic+ timer with an ID of 0, which fires as soon as possible
. We created a timer with a delayed fire date of 1 second, with an ID of 1

These steps set up a situation where the +randomizeShape:+ method is actually being called every second _by two different offset timers_. 

What happens next?
~~~~~~~~~~~~~~~~~~
In order to take advantage of this situation we code into the +randomizeShape+ some logic that differentiates the two timers and chooses to do different things for each timer.

For the example in the video, we've separated an animation into 2 difference cases:

- Timer 0 changes the +fillColor+ of a shape
- Timer 1 changes the +strokeColor+ of a shape

[source]
----
-(void)randomizeShape:(NSTimer *)timer {
    //figure out the current timer's id
    int currentTimer = [(NSNumber *)timer.userInfo intValue];

    //change fill or stroke accordingly
    if(currentTimer == 0) rect.fillColor = [self randomColor];
    else rect.strokeColor = [self randomColor];
}
----
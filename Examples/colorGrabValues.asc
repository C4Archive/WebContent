Color: Grab Values
==================
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   examples@c4ios.com
:code: https://gist.github.com/3218937

Grabbing the values from a color is a little tricky, but actually a very convenient way of accessing and storing the each component so that you can use them in another part of your application.

image::colorGrabValues/colorGrabValues.png["Grabbing Color Values",height=500]

Getting Colors
--------------
There are 3 convenient methods for getting values from a color. You can get the RGB, HSB and White color values.

The basic trick to getting color values is to set up an array to hold them. This is quite a nice technique, because you then have all your values in one array that you can easily reuse.

[source]
----
CGFloat rgbValues[4];
CGFloat hsbValues[4];
CGFloat greyValues[2];
----

.4,4,2???
[NOTE]
When grabbing RGB or HSB colors, you have to grab 4 values... The three primary color values _plus_ one for the color's _alpha_ component. For greyscale colors you need to grab 2 values, the grey color _plus_ the alpha.

Grabbing RGBA
~~~~~~~~~~~~~
To grab the RGBA values from a color you do the following:

[source]
----
CGFloat rgbValues[4];
[color getRed:&rgbValues[0] green::&rgbValues[1] blue:&rgbValues[2] alpha:&rgbValues[3]];
----

Grabbing HSBA
~~~~~~~~~~~~~
To grab the HSBA values from a color you do the following:

[source]
----
CGFloat hsbValues[4];
[color getHue:&hsbValues[0] saturation::&hsbValues[1] brightness:&hsbValues[2] alpha:&hsbValues[3]];
----

Grabbing Greyscale
~~~~~~~~~~~~~~~~~~
To grab the greyscale values from a color you do the following:

[source]
----
CGFloat greyValues[2];
[color getWhite:&greyValues[0] alpha:&greyValues[1]];
----

.What the &?
[NOTE]
In all of the examples above there is an & symbol before the name of the array we're using to grab colors. This *&* is called a _unary operator_ and actually passes the address of the variable to the function. So, when the function gets something like *&rgbValue[0]* it actually has a direct reference to the first spot in the array. What it does is set the value of the array at the given address, rather than pass the variable back and forth through a method that might return something like a float value.


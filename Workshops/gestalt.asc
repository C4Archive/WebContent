Gestalt
=======
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: https://gist.github.com/C4Code/5522440

These are notes for the first session of _C4: Media & Interactivity_ workshop at link:http://www.viviomediaarts.com[VIVO] starting May 6th, 2013.

image::gestalt/gestaltHeader.png["Four Gestalt Images"]

Gestalt
-------
The first session of this 4-night workshop will have you explore basic concepts of working with shapes (i.e. media objects) through the creation of gestalt imagery. We will build shapes, add them to the canvas, and work in various ways to create visual effects using circles, lines and polygons.

This session will also be a general introduction to C4.

What You Will Come Away With
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
By the end of this session you will learn how to:

. build, run and share code.
. find code online, and where to ask questions
. read examples and tutorials.
. add shapes to the canvas
. style shapes
. position shapes
. create complex shapes
. work with a variety of different types of shapes
. create basic animations
. set default styles for shapes

Basics to Remember
------------------
Here are a few  important things you might need to remember:

Add to the Canvas
~~~~~~~~~~~~~~~~~
Here's how you add a shape to the canvas:

[source]
----
[self.canvas addShape:aShape];
----

Add to a Shape
~~~~~~~~~~~~~~
Here's how you add a shape to a shape:

[source]
----
[mainShape addShape:anotherShape]
----

Adding Lots to the Canvas
~~~~~~~~~~~~~~~~~~~~~~~~~
To add a bunch of objects to the canvas at the same time, you can put them in an array like so:

[source]
----
[self.canvas addObjects:@[shape1,shape2,shape3]];
----

The `@[...]` syntax is shorthand for making an array of objects.

Create a Point
~~~~~~~~~~~~~~
Here's how you create a `CGPoint`:

[source]
----
CGPoint p = CGPointMake(10,10); //x,y coordinates
----

Change Position
~~~~~~~~~~~~~~~
Here are 2 ways to change the position of an object:

[source]
----
CGPoint p = CGPointMake(100,100);
obj.center = p;
obj.origin = p;
----

Create a Predefined Color
~~~~~~~~~~~~~~~~~~~~~~~~~
There are many predefined colors, here's how to create a few of them:

[source]
----
UIColor *red = [UIColor redColor];
UIColor *blue = [UIColor blueColor];
UIColor *green = [UIColor greenColor];
----

Have a look at the link:/tutorials/colorsInDepth.php[Colors In-Depth] tutorial for more.

Create a Custom Color
~~~~~~~~~~~~~~~~~~~~~
Here's how you create a custom color:

[source]
----
UIColor *c = [UIColor colorWithRed:1.0f	green:0.5f blue:0.25f alpha:1.0f];
----

Have a look at the link:/tutorials/colorsInDepth.php[Colors In-Depth] tutorial for more.

3 C4 Colors
~~~~~~~~~~~
You can use the following just like regular `UIColor` objects:

- C4RED
- C4BLUE
- C4GREY

Change the Fill Color
~~~~~~~~~~~~~~~~~~~~~
To change the `fillColor` of a shape, do the following:

[source]
----
shape.fillColor = C4RED;
----

Change the Stroke Color
~~~~~~~~~~~~~~~~~~~~~~~
To change the `strokeColor` of a shape, do the following:

[source]
----
shape.strokeColor = C4RED;
----

Points for Polygons
~~~~~~~~~~~~~~~~~~~
For lines, triangles and polygons, this is how you create a set of points:

[source]
----
CGPoint points[3] = {CGPointMake(10,10),CGPointMake(100,10),CGPointMake(50,60)};
----

Remember, you can change the number of points (i.e. `3`) to any number, but when you do you should have the same amount of `CGPointMake` calls in between the `{` and `}` brackets.

Changing Default Styles
~~~~~~~~~~~~~~~~~~~~~~~
You can change the default style of shapes like so:

[source]
----
[C4Shape defaultStyle].fillColor = C4RED;
----

You can change other default styles in the same way! But remember to do this before creating your objects.

Triangle (Polygon)
------------------
We're going to create the look of a white triangle that sits inside 3 circles. It looks like:

image::gestalt/trianglePolygon.png["Triangle with Polygons"]

The easiest way to create this effect is to place a triangle over top of 3 circles. 

Three Circles
~~~~~~~~~~~~~
First things first. Create 3 circles:

[source]
----
C4Shape *circle1, *circle2, *circle3;

circle1 = [C4Shape ellipse:CGRectMake(0, 0, 192, 192)];
circle2 = [C4Shape ellipse:CGRectMake(0, 0, 192, 192)];
circle3 = [C4Shape ellipse:CGRectMake(0, 0, 192, 192)];
----

If you do nothing to the shapes, there will be a blue line around all of them. This is the default style for all shapes (i.e. a 5pt blue line). To get rid of this, we can set the default style for shapes like so:

[source]
----
[C4Shape defaultStyle].lineWidth = 0.0f;
----

Add that line _before_ you create the three circles.

Position Their Centers
~~~~~~~~~~~~~~~~~~~~~~
The next step is to position the three circles in the proper positions. We do this by setting the `center` positions of each object. 

[source]
----
circle1.center = CGPointMake(self.canvas.center.x - 110, self.canvas.center.y + 75);
circle2.center = CGPointMake(self.canvas.center.x + 110, self.canvas.center.y + 75);
circle3.center = CGPointMake(self.canvas.center.x, self.canvas.center.y - 120);
----

You'll notice that we're positioning based on the `center` of the canvas. The additional numbers (i.e. -110, +75, etc) I guessed and tweaked until the positions were right. This puts the center of the space between all three circles pretty close to the center of the screen of the device you're using.

Create A Triangle
~~~~~~~~~~~~~~~~~
You need to specify 3 points to create a triangle, to align the triangle with the circles all you need to do is use the positions of the centers of each shape like so:

[source]
----
CGPoint trianglePoints[3] = {
    circle1.center,
    circle2.center,
    circle3.center
};
C4Shape *triangle = [C4Shape triangle:trianglePoints];
----

Fill It!
~~~~~~~~
You now need to change the `fillColor` of the triangle so that it matches the white background of the app. 

[source]
----
triangle.fillColor = [UIColor whiteColor];
----

Add Them All!
~~~~~~~~~~~~~
Finally, add all the shapes to the canvas:

[source]
----
[self.canvas addObjects:@[circle1, circle2, circle3, triangle]];
----

Finito.

Triangle (Wedges)
-----------------
The other way to create the effect of a triangle sitting in 3 circles is to create wedges that are aligned. 

image::gestalt/triangleWedges.png[A Triangle of Wedges]

Create 3 Wedges
~~~~~~~~~~~~~~~
Creating a wedge is a little different than creating a circle... Instead of specifying a frame you have to give it a bunch of parameters and it constructs the shape for you. First, set up the default style and create references for the 3 wedges:

[source]
----
[C4Shape defaultStyle].lineWidth = 0.0f;
C4Shape *wedge1, *wedge2, *wedge3;
----

3 Angles
~~~~~~~~
Creating a wedge requires the following:

. a center point
. a radius 
. a start angle
. an end angle
. flag for drawing clockwise or counterclockwise

We're going to draw 3 wedges that have different start / end angles each time we do we're going to update a `CGPoint` that we call `currentCenter`.

[source]
----
CGPoint currentCenter = CGPointMake(self.canvas.center.x - 110, self.canvas.center.y + 75);
wedge1 = [C4Shape wedgeWithCenter:currentCenter
                           radius:96
                       startAngle:0
                         endAngle:TWO_PI * 5/6
                        clockwise:YES];

currentCenter = CGPointMake(self.canvas.center.x + 110, self.canvas.center.y + 75);
wedge2 = [C4Shape wedgeWithCenter:currentCenter
                           radius:96
                       startAngle:TWO_PI * 4/6
                         endAngle:PI
                        clockwise:YES];

currentCenter = CGPointMake(self.canvas.center.x, self.canvas.center.y - 120);
wedge3 = [C4Shape wedgeWithCenter:currentCenter
                           radius:96
                       startAngle:TWO_PI*2/6
                         endAngle:TWO_PI/6
                        clockwise:YES];
----

Notice? We used the same points as in the previous example.

Add Them!
~~~~~~~~~
Add all the wedges to the canvas:

[source]
----
[self.canvas addObjects:@[wedge1,wedge2,wedge3]];
----

Cube 1
------
We're going to create a shape that looks like a wireframe cube seen from an angle. A pretty classic drawing:

image::gestalt/cube1.png["Cube 1"]

[[anchor-cube]]
The Cube Shape
~~~~~~~~~~~~~~
To do this we're going to start by creating a shape that represents the background of the cube. This outline has 6 points on it, so we're going to build the shape as a polygon:

[source]
----
CGPoint cubePolyPoints[6] = {
    CGPointMake(100, 0),
    CGPointMake(200, 50),
    CGPointMake(200, 164),
    CGPointMake(100, 214),
    CGPointMake(0, 164),
    CGPointMake(0, 50)
};

C4Shape *cubeOutline = [C4Shape polygon:cubePolyPoints pointCount:6];
[cubeOutline closeShape];
----

NOTE: We didn't draw the shape in the center of the canvas. We'll shift the whole thing over later...

Draw the Lines
~~~~~~~~~~~~~~
This image actually draws 3 lines that cross at the center of the shape. Lines are simply 2-point polygons, so we're going to make them in sort of the same way as we did the background shape:

[source]
----
CGPoint linePoints[2] = {cubePolyPoints[0],cubePolyPoints[3]};
C4Shape *line1 = [C4Shape line:linePoints];

linePoints[0] = cubePolyPoints[1];
linePoints[1] = cubePolyPoints[4];
C4Shape *line2 = [C4Shape line:linePoints];

linePoints[0] = cubePolyPoints[2];
linePoints[1] = cubePolyPoints[5];
C4Shape *line3 = [C4Shape line:linePoints];
----

NOTE: We _reuse_ the array of points... This makes our code cleaner and easier to read.

Add Them!
~~~~~~~~~
Now, we're going to do something tricky here. You've already seen that we can add things to the canvas... But! Shapes can actually be added _to other shapes_!!! When we do this we're going to be able to shift everything to the center as one object. 

[source]
----
[cubeOutline addObjects:@[line1,line2,line3]];
----

Shift, Add.
~~~~~~~~~~~
Finally, shift the position of the cube to the center of the canvas and add it to the screen.

[source]
----
cubeOutline.center = self.canvas.center;
[self addShape:cubeOutline];
----

Cube 2
------
We're going to draw _another_ cube that looks a bit shifted in terms of its perspective. Another classic image.

image::gestalt/cube2.png["Cube 2"]

This is definitely trickier...

The Cube Shape
~~~~~~~~~~~~~~
First things first, just like the first cube example, we're going to create a cube shape:

[source]
----
CGPoint cubePolyPoints[6] = {
    CGPointMake(50, 0),
    CGPointMake(150, 0),
    CGPointMake(150, 100),
    CGPointMake(100, 150),
    CGPointMake(0, 150),
    CGPointMake(0, 50)
};

C4Shape *cubeOutline = [C4Shape polygon:cubePolyPoints pointCount:6];
[cubeOutline closeShape];
----

...all closed up and ready to go. This is basically the same approach as in our first cube example.

TIP: Polygons are kept "open" by default, meaning that if you create a polygon from 3 points you'll be making a *V* instead of a triangle. To close the polygon you just use the method above.

Connection Points
~~~~~~~~~~~~~~~~~
We've got a bit of a different problem here in drawing the inner lines for this cube. Because we've "shifted" the perspective of the cube we actually have 2 points where lines will converge. At each of these points 3 lines will converge, and because of their offset this will give us our gestalt effect.

Create these points now:

[source]
----
CGPoint connectionPoints[2] = {CGPointMake(50, 100),CGPointMake(100, 50)};
----

We're going to reuse this array over and over again, so it's good to define it like this now.

The Lines
~~~~~~~~~
We're going to create an array of line points that we'll reuse to build each of the 6 lines that will be added to the cube shape. 

[source]
----
CGPoint linePoints[2] = {cubePolyPoints[0],connectionPoints[0]};
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[2];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[4];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[1];
linePoints[1] = connectionPoints[1];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[3];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[5];
[cubeOutline addShape:[C4Shape line:linePoints]];
---- 

The first three lines are drawn from points `0, 2, 4` of the polygon to the first connection point. The remaining lines are drawn from points `1, 3, 5` of the polygon to the second connection point.

NOTE: We switched to the second connection point in the line of code that specifies `linePoints[1] = ...`

Center, Add
~~~~~~~~~~~
Finally, center the shape and add it to the canvas:

[source]
----
cubeOutline.center = self.canvas.center;
[self.canvas addShape:cubeOutline];
----

Cube 3
------
The last example we're going to do is to create the illusion of a wireframe cube from cut-outs of various circles.

image:gestalt/cube3.png["Cube 3"]

This one is certainly the trickiest.

The Cube Shape
~~~~~~~~~~~~~~
Yes. Yes, we're actually going to create another cube shape. 

[source]
----
[C4Shape defaultStyle].fillColor = [UIColor clearColor];
[C4Shape defaultStyle].strokeColor = [UIColor whiteColor];

CGPoint cubePolyPoints[6] = {
    CGPointMake(50, 0),
    CGPointMake(150, 0),
    CGPointMake(150, 100),
    CGPointMake(100, 150),
    CGPointMake(0, 150),
    CGPointMake(0, 50)
};

C4Shape *cubeOutline = [C4Shape polygon:cubePolyPoints pointCount:6];
[cubeOutline closeShape];
----

We added some default styles to our shapes to get things started, and then created the cube shape like we did in our other examples.

The Container
~~~~~~~~~~~~~
Remember how we added the lines to the shape in the first <<anchor-cube,cube example>>? If we take the same approach and add the little circles to our shape then they're actually going to sit _on top_ of everything that we initially draw.

What we want is for them to be _underneath_ the main shape. How do we do that? By putting them _under_ the main shape... This means that we're going to have to add our main shape to something else... 

Build a container!

[source]
----
C4Shape *container = [cubeOutline copy];
container.lineWidth = 0.0f;
container.fillColor = [UIColor clearColor];
[self.canvas addShape:container];
----

This creates us a copy of our shape, and then makes sure that it is "invisible"... It's not actually invisible though, because shapes are really views that have backing layers that draw content. What we're doing is making sure that the copied shape's path is invisible.

When we add other shapes to this container shape we'll still be able to see them.

Add the Circles
~~~~~~~~~~~~~~~
The next step is to add the little circles to the container. We do this now so that later on we can add the main cube shape _over top_ of the circles!

[source]
----
CGRect circleFrame = CGRectMake(0, 0, 36, 36);
C4Shape *point = [C4Shape ellipse:circleFrame];
point.fillColor = C4GREY;
point.lineWidth = 0.0f;

for(int i = 0; i < 6; i++) {
    C4Shape *circle = [point copy];
    circle.center = cubePolyPoints[i];
    [container addShape:circle];
}
----

This little `for` loop cycles through each of the 6 points we used for building the cube shape and creates a copy of a small circle, centered at each of the points. It then adds these shapes to the container.

TIP: Because shapes (and all objects in C4) are actually _views_ you can layer them very easily. You can add them to one another in particular orders to get interesting effects too.

Now, we just have to add two circles (in the exact same way) but at the connection points.

[source]
----
CGPoint connectionPoints[2] = {CGPointMake(50, 100),CGPointMake(100, 50)};
for(int i = 0; i < 2; i++) {
    C4Shape *circle = [point copy];
    circle.center = connectionPoints[i];
    [container addShape:circle];
}
----

Add the Cube Shape
~~~~~~~~~~~~~~~~~~
Finally, we're going to create and add a cube shape in just the same way as we did in our second cube example:

[source]
----
CGPoint linePoints[2] = {cubePolyPoints[0],connectionPoints[0]};
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[2];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[4];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[1];
linePoints[1] = connectionPoints[1];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[3];
[cubeOutline addShape:[C4Shape line:linePoints]];

linePoints[0] = cubePolyPoints[5];
[cubeOutline addShape:[C4Shape line:linePoints]];

[container addShape:cubeOutline];
----

Instead of adding things to the canvas, we add them to the container and then add the entire container to the canvas!

Add the Container
~~~~~~~~~~~~~~~~~
...Do it. 

[source]
----
container.center = self.canvas.center;
[self.canvas addShape:container];
----

For Kicks
~~~~~~~~~
Just for kicks, add the following line of code after adding the container to the canvas:

[source]
----
[self runMethod:@"animate:" withObject:container afterDelay:1.0f];
----

This line basically says "after waiting for 1 second, run a method called `animate:` and pass it the container object as its argument"...

You'll also have to add the following method to your project:

[source]
----
-(void)animate:(C4Shape *)shape {
    shape.animationDuration = 5.0f;
    shape.animationOptions = LINEAR | REPEAT;
    shape.rotation = TWO_PI;
}
----

This method takes a shape and adds an animation duration, with special linear and repeat options, then triggers the shape to perform a full rotation. 

Wrapping Things Up
------------------
This was a pretty thorough introduction to working with shapes. In going through this tutorial you've learned a lot about properties, working with _media objects_, layering and different ways of thinking about creating complex objects. Many of the things you've done in this tutorial are _widely applicable to all other objects in C4_. 

C4 is starting to become a very powerful API for quickly building rich, expressive applications for the iOS platform. It's really quite hard to sum up everything in one shot (actually, impossible is probably the word). So, I hope that this tutorial provides you the basic understand of a few things that we'll be able to build on in the next session.

You Outta Here? High-Five.
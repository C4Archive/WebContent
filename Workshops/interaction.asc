Interaction
===========
Travis Kirton
:toc:
:theme: 	c4tutorial
:source-highlighter: pygments
:language: 	objective-c
:icons:
:numbered:
:email:   tutorials@c4ios.com
:code: 

Interaction is _huge_ in C4. Every kind of object can interact with one another via notifications and all visual object have some level of touch interaction. Tonight we're going to step through most of the concepts surrounding interaction, starting with notifications.

Notifications
-------------
IMHO this is one of _the_ defining features of C4. All objects can _communicate_ with one another. A simple example of this happens when a square says "hey I was touched" and a circle who is listening to the square hears the message and changes its own color. Neither of these two objects has to have a reference to one another because they can interact via their app's _notification center_.

Let's have a look...

Posting
~~~~~~~
An object can post notifications. This is like standing in the middle of a room and saying something. If there's a crowd of people, some might listen to you, others might ignore you. In either case, the act of just saying something is like _posting a notification_. 

Say Something
~~~~~~~~~~~~~
To get an object to say something you can do this:

[source]
----
[self postNotification:@"aMessage"];
[self postNotification:@"nobodyListensToMe"];
----

Basically, you can put anything as the message for the notification (but it has to be a string).

Where Does It Go?
~~~~~~~~~~~~~~~~~
Nowhere, kinda. If you post something and nothing is listening for that message then it's kinda like you didn't do anything in the first place... Like a tree falling in a forest. 

Listening
~~~~~~~~~
For this stuff to really work, there needs to be some object speaking and another listening. Furthermore, when an object listens for a message it should also react by running a method.

[source]
----
[self listenFor:@"aMessage" andRunMethod:@"test"];
[self listenFor:@"nobodyListensToMe" andRunMethod:@"thatsBecauseYoureBoring"];
----

Objects can listen to one another, or to themselves... An object listening to itself is a bit redundant, but illustrates the concept of notifications pretty well:

[source]
----
-(void)setup {
    [self listenFor:@"nobodyListensToMe" andRunMethod:@"thatsBecauseYoureBoring"];
}

-(void)touchesBegan {
	[self postNotification:@"nobodyListensToMe"];
}

-(void)thatsBecauseYoureBoring {
    C4Log(@"That's because you're boring");
}
----

Cooked-In Notifications
-----------------------
A lot of objects already have notifications cooked into them. For instance, when _any_ object is touched it posts a `touchesBegan` method. There are a bunch of messages that C4 objects broadcast out of the box so that you can more easily set up interactions.

The Short List
~~~~~~~~~~~~~~
Here's a list of basic notifications you'll use a lot in your development:

.all objects
[source]
----
@"touchesBegan"
@"touchesMoved"
@"touchesEnded"
@"swipedLeft"
@"swipedRight"
@"swipedUp"
@"swipedDown"
@"moved"
@"tapped"
@"pressedLong"
----

.buttons
[source]
----
@"trackingBegan"
@"trackingContinued"
@"trackingEnded"
@"trackingCancelled"
----

.random ones
[source]
----
@"imageWasCaptured" 		//for the camera
@"pixelDataWasLoaded" 		//for images
@"movieIsReadyForPlayback"	//for movies
@"movieReachedEnd"			//for movies
@"endedNormally"			//for audio samples
----

The Long List
~~~~~~~~~~~~~
All image filters post a notification when they're complete. The message is the corresponding CoreImage filter name _plus_ the word `Complete`. There's something like 96 filters, so we wont go through them all. The following will give you a taste of how they're written out:

.image filters
[source]
----
@"CISepiaToneComplete"			
@"CIColorBurnBlendModeComplete"	
@"CIAreaHistogramComplete"
----

etc...

Masking
-------
In some strange way, I consider this a form of one object interacting with another because you need one to affect the other. You can use either shapes or images as masks for other objects.

Shapes
~~~~~~
Create a shape, then use it as a mask:

//image 

[source]
----
object.mask = shape;
----

Images
~~~~~~
Create an image _with an alpha component_ and use it as a mask:

//image

[source]
----
object.mask = image;
----

GIST:Check out example that shows how to mask with link:http:/examples/maskingShapes.php[shapes], and this one that uses link:/examples/maskingImages.php[images].

That's it... in a nutshell. Now for the goods.

Touches
-------
Everything in C4 is touchable. There are 3 methods that give you really easy access to touches:

[source]
----
-(void)touchesBegan{};
-(void)touchesMoved{};
-(void)touchesEnded{};
----

These three methods will most likely be your way into interaction.

touchesBegan
~~~~~~~~~~~~
This method gets called from _any object_ when that object registers a new touch. This might be triggered by one, two, three or more fingers touching an object at the same time. You can put other method calls in here and your objects will essentially start to work like buttons.

[source]
----
-(void)touchesBegan {
	//do stuff
}
----

This method gets called one time when any touch starts. Once it starts then the following method begins to get called...

touchesMoved
~~~~~~~~~~~~
This method gets called from _any object_ when that object has already registered a new touch and called `touchesBegan`. Afterwards, and for the life of the current touch, the `touchesMoved` method will get called for even the smallest movement of your finger.

[source]
----
-(void)touchesMoved {
	//do stuff when a touch is dragged 
}
----

This method stops being called when a finger is basically lifted from the screen or object. The following method is then called...

touchesEnded
~~~~~~~~~~~~
This one is sort of the opposite of `touchesBegan` and happens only once at the end of the lifespan of a touch.

[source]
----
-(void)touchesEnded {
	//now that the touch is done, do something to wrap up...
}
----

With Events
-----------
If you really want to dig into touches you can override three advanced versions of the methods we just talked about:

[source]
----
-(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent *)event {};
-(void)touchesMoved:(NSSet*)touches withEvent:(UIEvent *)event {};
-(void)touchesEnded:(NSSet*)touches withEvent:(UIEvent *)event {};
----

These methods work the same way as the simple versions, except they give you access to all the touches for a given moment. They all work the same way, so I'll just explain the first example.

Where'd That Happen
~~~~~~~~~~~~~~~~~~~
If you want to grab the point of a touch interaction you can do so by extracting a `UITouch` from the set of touches that was just registered. Then, you isolate the position of the touch like so:

[source]
----
-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {
    UITouch *touchObject = [touches anyObject];
    CGPoint touchPoint = [touchObject locationInView:self.canvas];
    C4Log(@"(%4.2f,%4.2f)",touchPoint.x,touchPoint.y);
}
----

This bit of code first extracts a touch from a given set of touches. Then, it isolates the location of the touch with respect to any view (here we just use the canvas). Finally, it takes the `x` and `y` positions of the `touchPoint` and prints them to the console.

Gestures
--------
Now we're getting into it... But, from here we're going to check out a couple of tutorials because these concepts are a bit deep.

link:http://www.c4ios.com/tutorials/interactionPanning.php[Interaction: Panning]

link:http://www.c4ios.com/tutorials/interactionPanningAdvanced[Interaction: Advanced Panning]

link:http://www.c4ios.com/tutorials/interactionSwipes[Interaction: Swipes]

link:http://www.c4ios.com/tutorials/interactionSwipesAdvanced[Interaction: Swipes Advanced]

link:http://www.c4ios.com/tutorials/interactionTapsAndTouches[Interaction: Taps & Touches]

UI Stuff
--------
We're going to do the same thing here, run through a bunch of examples that are online, because they're split up in a good way and the entire topic is pretty broad.

link:http://www.c4ios.com/examples/buttonSetup.php[UI: Button Setup]

link:http://www.c4ios.com/examples/buttonAction.php[UI: Button Action]

link:http://www.c4ios.com/examples/sliderSetup.php[UI: Slider Setup]

link:http://www.c4ios.com/examples/sliderActionTouch.php[UI: Slider Action - Touch]

link:http://www.c4ios.com/examples/sliderActionValue.php[UI: Slider Action - Value]

link:http://www.c4ios.com/examples/stepperSetup.php[UI: Stepper Setup]

link:http://www.c4ios.com/examples/stepperAction.php[UI: Stepper Action]

link:http://www.c4ios.com/examples/switchSetup.php[UI: Switch Setup]

link:http://www.c4ios.com/examples/switchAction.php[UI: Switch Action]

link:http://www.c4ios.com/examples/scrollViewImage.php[UI: Scrollview Image]

link:http://www.c4ios.com/examples/scrollViewLabel.php[UI: Scrollview Label]

Wrapping Things Up
------------------
This session went through a LOT of different techniques for getting objects to interact with one another, and also how to add touch interaction and UI elements to your projects. Hopefully we've gone through enough to show you that interaction is a HUGE part of C4, and more importantly that it's completely integrated with visual objects.

Merci Bien.